// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `board.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GrowbeMainboardConfig {
    // message fields
    pub hearthBeath: i32,
    pub preferedCommandConnection: CommandConnectionType,
    pub sync: ::protobuf::SingularPtrField<super::sync::SyncInfo>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrowbeMainboardConfig {
    fn default() -> &'a GrowbeMainboardConfig {
        <GrowbeMainboardConfig as ::protobuf::Message>::default_instance()
    }
}

impl GrowbeMainboardConfig {
    pub fn new() -> GrowbeMainboardConfig {
        ::std::default::Default::default()
    }

    // int32 hearthBeath = 1;


    pub fn get_hearthBeath(&self) -> i32 {
        self.hearthBeath
    }
    pub fn clear_hearthBeath(&mut self) {
        self.hearthBeath = 0;
    }

    // Param is passed by value, moved
    pub fn set_hearthBeath(&mut self, v: i32) {
        self.hearthBeath = v;
    }

    // .CommandConnectionType preferedCommandConnection = 2;


    pub fn get_preferedCommandConnection(&self) -> CommandConnectionType {
        self.preferedCommandConnection
    }
    pub fn clear_preferedCommandConnection(&mut self) {
        self.preferedCommandConnection = CommandConnectionType::MQTT;
    }

    // Param is passed by value, moved
    pub fn set_preferedCommandConnection(&mut self, v: CommandConnectionType) {
        self.preferedCommandConnection = v;
    }

    // .SyncInfo sync = 20;


    pub fn get_sync(&self) -> &super::sync::SyncInfo {
        self.sync.as_ref().unwrap_or_else(|| <super::sync::SyncInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sync(&mut self) {
        self.sync.clear();
    }

    pub fn has_sync(&self) -> bool {
        self.sync.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sync(&mut self, v: super::sync::SyncInfo) {
        self.sync = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sync(&mut self) -> &mut super::sync::SyncInfo {
        if self.sync.is_none() {
            self.sync.set_default();
        }
        self.sync.as_mut().unwrap()
    }

    // Take field
    pub fn take_sync(&mut self) -> super::sync::SyncInfo {
        self.sync.take().unwrap_or_else(|| super::sync::SyncInfo::new())
    }
}

impl ::protobuf::Message for GrowbeMainboardConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.sync {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.hearthBeath = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.preferedCommandConnection, 2, &mut self.unknown_fields)?
                },
                20 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sync)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.hearthBeath != 0 {
            my_size += ::protobuf::rt::value_size(1, self.hearthBeath, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.preferedCommandConnection != CommandConnectionType::MQTT {
            my_size += ::protobuf::rt::enum_size(2, self.preferedCommandConnection);
        }
        if let Some(ref v) = self.sync.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.hearthBeath != 0 {
            os.write_int32(1, self.hearthBeath)?;
        }
        if self.preferedCommandConnection != CommandConnectionType::MQTT {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.preferedCommandConnection))?;
        }
        if let Some(ref v) = self.sync.as_ref() {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrowbeMainboardConfig {
        GrowbeMainboardConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "hearthBeath",
                |m: &GrowbeMainboardConfig| { &m.hearthBeath },
                |m: &mut GrowbeMainboardConfig| { &mut m.hearthBeath },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CommandConnectionType>>(
                "preferedCommandConnection",
                |m: &GrowbeMainboardConfig| { &m.preferedCommandConnection },
                |m: &mut GrowbeMainboardConfig| { &mut m.preferedCommandConnection },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::sync::SyncInfo>>(
                "sync",
                |m: &GrowbeMainboardConfig| { &m.sync },
                |m: &mut GrowbeMainboardConfig| { &mut m.sync },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrowbeMainboardConfig>(
                "GrowbeMainboardConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrowbeMainboardConfig {
        static instance: ::protobuf::rt::LazyV2<GrowbeMainboardConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrowbeMainboardConfig::new)
    }
}

impl ::protobuf::Clear for GrowbeMainboardConfig {
    fn clear(&mut self) {
        self.hearthBeath = 0;
        self.preferedCommandConnection = CommandConnectionType::MQTT;
        self.sync.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrowbeMainboardConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrowbeMainboardConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct HostInformation {
    // message fields
    pub hostname: ::std::string::String,
    pub kernel: ::std::string::String,
    pub kernelVersion: ::std::string::String,
    pub architecture: ::std::string::String,
    pub os: ::std::string::String,
    pub deviceType: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HostInformation {
    fn default() -> &'a HostInformation {
        <HostInformation as ::protobuf::Message>::default_instance()
    }
}

impl HostInformation {
    pub fn new() -> HostInformation {
        ::std::default::Default::default()
    }

    // string hostname = 1;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }

    // string kernel = 2;


    pub fn get_kernel(&self) -> &str {
        &self.kernel
    }
    pub fn clear_kernel(&mut self) {
        self.kernel.clear();
    }

    // Param is passed by value, moved
    pub fn set_kernel(&mut self, v: ::std::string::String) {
        self.kernel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kernel(&mut self) -> &mut ::std::string::String {
        &mut self.kernel
    }

    // Take field
    pub fn take_kernel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kernel, ::std::string::String::new())
    }

    // string kernelVersion = 3;


    pub fn get_kernelVersion(&self) -> &str {
        &self.kernelVersion
    }
    pub fn clear_kernelVersion(&mut self) {
        self.kernelVersion.clear();
    }

    // Param is passed by value, moved
    pub fn set_kernelVersion(&mut self, v: ::std::string::String) {
        self.kernelVersion = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kernelVersion(&mut self) -> &mut ::std::string::String {
        &mut self.kernelVersion
    }

    // Take field
    pub fn take_kernelVersion(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kernelVersion, ::std::string::String::new())
    }

    // string architecture = 4;


    pub fn get_architecture(&self) -> &str {
        &self.architecture
    }
    pub fn clear_architecture(&mut self) {
        self.architecture.clear();
    }

    // Param is passed by value, moved
    pub fn set_architecture(&mut self, v: ::std::string::String) {
        self.architecture = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_architecture(&mut self) -> &mut ::std::string::String {
        &mut self.architecture
    }

    // Take field
    pub fn take_architecture(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.architecture, ::std::string::String::new())
    }

    // string os = 5;


    pub fn get_os(&self) -> &str {
        &self.os
    }
    pub fn clear_os(&mut self) {
        self.os.clear();
    }

    // Param is passed by value, moved
    pub fn set_os(&mut self, v: ::std::string::String) {
        self.os = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os(&mut self) -> &mut ::std::string::String {
        &mut self.os
    }

    // Take field
    pub fn take_os(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.os, ::std::string::String::new())
    }

    // string deviceType = 6;


    pub fn get_deviceType(&self) -> &str {
        &self.deviceType
    }
    pub fn clear_deviceType(&mut self) {
        self.deviceType.clear();
    }

    // Param is passed by value, moved
    pub fn set_deviceType(&mut self, v: ::std::string::String) {
        self.deviceType = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deviceType(&mut self) -> &mut ::std::string::String {
        &mut self.deviceType
    }

    // Take field
    pub fn take_deviceType(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deviceType, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HostInformation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kernel)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kernelVersion)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.architecture)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.os)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deviceType)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hostname);
        }
        if !self.kernel.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.kernel);
        }
        if !self.kernelVersion.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.kernelVersion);
        }
        if !self.architecture.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.architecture);
        }
        if !self.os.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.os);
        }
        if !self.deviceType.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.deviceType);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hostname.is_empty() {
            os.write_string(1, &self.hostname)?;
        }
        if !self.kernel.is_empty() {
            os.write_string(2, &self.kernel)?;
        }
        if !self.kernelVersion.is_empty() {
            os.write_string(3, &self.kernelVersion)?;
        }
        if !self.architecture.is_empty() {
            os.write_string(4, &self.architecture)?;
        }
        if !self.os.is_empty() {
            os.write_string(5, &self.os)?;
        }
        if !self.deviceType.is_empty() {
            os.write_string(6, &self.deviceType)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HostInformation {
        HostInformation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hostname",
                |m: &HostInformation| { &m.hostname },
                |m: &mut HostInformation| { &mut m.hostname },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kernel",
                |m: &HostInformation| { &m.kernel },
                |m: &mut HostInformation| { &mut m.kernel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kernelVersion",
                |m: &HostInformation| { &m.kernelVersion },
                |m: &mut HostInformation| { &mut m.kernelVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "architecture",
                |m: &HostInformation| { &m.architecture },
                |m: &mut HostInformation| { &mut m.architecture },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "os",
                |m: &HostInformation| { &m.os },
                |m: &mut HostInformation| { &mut m.os },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deviceType",
                |m: &HostInformation| { &m.deviceType },
                |m: &mut HostInformation| { &mut m.deviceType },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HostInformation>(
                "HostInformation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HostInformation {
        static instance: ::protobuf::rt::LazyV2<HostInformation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HostInformation::new)
    }
}

impl ::protobuf::Clear for HostInformation {
    fn clear(&mut self) {
        self.hostname.clear();
        self.kernel.clear();
        self.kernelVersion.clear();
        self.architecture.clear();
        self.os.clear();
        self.deviceType.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HostInformation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HostInformation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct HelloWord {
    // message fields
    pub version: ::std::string::String,
    pub cloudVersion: ::std::string::String,
    pub RTC: ::std::string::String,
    pub boards: ::protobuf::RepeatedField<RunningComboard>,
    pub host: ::protobuf::SingularPtrField<HostInformation>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HelloWord {
    fn default() -> &'a HelloWord {
        <HelloWord as ::protobuf::Message>::default_instance()
    }
}

impl HelloWord {
    pub fn new() -> HelloWord {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string cloudVersion = 2;


    pub fn get_cloudVersion(&self) -> &str {
        &self.cloudVersion
    }
    pub fn clear_cloudVersion(&mut self) {
        self.cloudVersion.clear();
    }

    // Param is passed by value, moved
    pub fn set_cloudVersion(&mut self, v: ::std::string::String) {
        self.cloudVersion = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cloudVersion(&mut self) -> &mut ::std::string::String {
        &mut self.cloudVersion
    }

    // Take field
    pub fn take_cloudVersion(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cloudVersion, ::std::string::String::new())
    }

    // string RTC = 3;


    pub fn get_RTC(&self) -> &str {
        &self.RTC
    }
    pub fn clear_RTC(&mut self) {
        self.RTC.clear();
    }

    // Param is passed by value, moved
    pub fn set_RTC(&mut self, v: ::std::string::String) {
        self.RTC = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_RTC(&mut self) -> &mut ::std::string::String {
        &mut self.RTC
    }

    // Take field
    pub fn take_RTC(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.RTC, ::std::string::String::new())
    }

    // repeated .RunningComboard boards = 4;


    pub fn get_boards(&self) -> &[RunningComboard] {
        &self.boards
    }
    pub fn clear_boards(&mut self) {
        self.boards.clear();
    }

    // Param is passed by value, moved
    pub fn set_boards(&mut self, v: ::protobuf::RepeatedField<RunningComboard>) {
        self.boards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_boards(&mut self) -> &mut ::protobuf::RepeatedField<RunningComboard> {
        &mut self.boards
    }

    // Take field
    pub fn take_boards(&mut self) -> ::protobuf::RepeatedField<RunningComboard> {
        ::std::mem::replace(&mut self.boards, ::protobuf::RepeatedField::new())
    }

    // .HostInformation host = 5;


    pub fn get_host(&self) -> &HostInformation {
        self.host.as_ref().unwrap_or_else(|| <HostInformation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    pub fn has_host(&self) -> bool {
        self.host.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: HostInformation) {
        self.host = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut HostInformation {
        if self.host.is_none() {
            self.host.set_default();
        }
        self.host.as_mut().unwrap()
    }

    // Take field
    pub fn take_host(&mut self) -> HostInformation {
        self.host.take().unwrap_or_else(|| HostInformation::new())
    }
}

impl ::protobuf::Message for HelloWord {
    fn is_initialized(&self) -> bool {
        for v in &self.boards {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.host {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cloudVersion)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.RTC)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.boards)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.host)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.cloudVersion.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cloudVersion);
        }
        if !self.RTC.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.RTC);
        }
        for value in &self.boards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.host.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.cloudVersion.is_empty() {
            os.write_string(2, &self.cloudVersion)?;
        }
        if !self.RTC.is_empty() {
            os.write_string(3, &self.RTC)?;
        }
        for v in &self.boards {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.host.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HelloWord {
        HelloWord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &HelloWord| { &m.version },
                |m: &mut HelloWord| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cloudVersion",
                |m: &HelloWord| { &m.cloudVersion },
                |m: &mut HelloWord| { &mut m.cloudVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "RTC",
                |m: &HelloWord| { &m.RTC },
                |m: &mut HelloWord| { &mut m.RTC },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RunningComboard>>(
                "boards",
                |m: &HelloWord| { &m.boards },
                |m: &mut HelloWord| { &mut m.boards },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HostInformation>>(
                "host",
                |m: &HelloWord| { &m.host },
                |m: &mut HelloWord| { &mut m.host },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HelloWord>(
                "HelloWord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HelloWord {
        static instance: ::protobuf::rt::LazyV2<HelloWord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HelloWord::new)
    }
}

impl ::protobuf::Clear for HelloWord {
    fn clear(&mut self) {
        self.version.clear();
        self.cloudVersion.clear();
        self.RTC.clear();
        self.boards.clear();
        self.host.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HelloWord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HelloWord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct VersionRelease {
    // message fields
    pub version: ::std::string::String,
    pub channel: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VersionRelease {
    fn default() -> &'a VersionRelease {
        <VersionRelease as ::protobuf::Message>::default_instance()
    }
}

impl VersionRelease {
    pub fn new() -> VersionRelease {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string channel = 2;


    pub fn get_channel(&self) -> &str {
        &self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: ::std::string::String) {
        self.channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel(&mut self) -> &mut ::std::string::String {
        &mut self.channel
    }

    // Take field
    pub fn take_channel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel, ::std::string::String::new())
    }
}

impl ::protobuf::Message for VersionRelease {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.channel.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.channel);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.channel.is_empty() {
            os.write_string(2, &self.channel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VersionRelease {
        VersionRelease::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &VersionRelease| { &m.version },
                |m: &mut VersionRelease| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel",
                |m: &VersionRelease| { &m.channel },
                |m: &mut VersionRelease| { &mut m.channel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VersionRelease>(
                "VersionRelease",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VersionRelease {
        static instance: ::protobuf::rt::LazyV2<VersionRelease> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VersionRelease::new)
    }
}

impl ::protobuf::Clear for VersionRelease {
    fn clear(&mut self) {
        self.version.clear();
        self.channel.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VersionRelease {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersionRelease {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct UpdateExecute {
    // message fields
    pub version: ::std::string::String,
    pub restarted: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateExecute {
    fn default() -> &'a UpdateExecute {
        <UpdateExecute as ::protobuf::Message>::default_instance()
    }
}

impl UpdateExecute {
    pub fn new() -> UpdateExecute {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // bool restarted = 2;


    pub fn get_restarted(&self) -> bool {
        self.restarted
    }
    pub fn clear_restarted(&mut self) {
        self.restarted = false;
    }

    // Param is passed by value, moved
    pub fn set_restarted(&mut self, v: bool) {
        self.restarted = v;
    }
}

impl ::protobuf::Message for UpdateExecute {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.restarted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if self.restarted != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if self.restarted != false {
            os.write_bool(2, self.restarted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateExecute {
        UpdateExecute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &UpdateExecute| { &m.version },
                |m: &mut UpdateExecute| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "restarted",
                |m: &UpdateExecute| { &m.restarted },
                |m: &mut UpdateExecute| { &mut m.restarted },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateExecute>(
                "UpdateExecute",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateExecute {
        static instance: ::protobuf::rt::LazyV2<UpdateExecute> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateExecute::new)
    }
}

impl ::protobuf::Clear for UpdateExecute {
    fn clear(&mut self) {
        self.version.clear();
        self.restarted = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateExecute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateExecute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RestartRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RestartRequest {
    fn default() -> &'a RestartRequest {
        <RestartRequest as ::protobuf::Message>::default_instance()
    }
}

impl RestartRequest {
    pub fn new() -> RestartRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RestartRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RestartRequest {
        RestartRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RestartRequest>(
                "RestartRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RestartRequest {
        static instance: ::protobuf::rt::LazyV2<RestartRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RestartRequest::new)
    }
}

impl ::protobuf::Clear for RestartRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RestartRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RestartRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct LocalConnection {
    // message fields
    pub ssid: ::std::string::String,
    pub signalLevel: i32,
    pub ipAddr: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalConnection {
    fn default() -> &'a LocalConnection {
        <LocalConnection as ::protobuf::Message>::default_instance()
    }
}

impl LocalConnection {
    pub fn new() -> LocalConnection {
        ::std::default::Default::default()
    }

    // string ssid = 1;


    pub fn get_ssid(&self) -> &str {
        &self.ssid
    }
    pub fn clear_ssid(&mut self) {
        self.ssid.clear();
    }

    // Param is passed by value, moved
    pub fn set_ssid(&mut self, v: ::std::string::String) {
        self.ssid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ssid(&mut self) -> &mut ::std::string::String {
        &mut self.ssid
    }

    // Take field
    pub fn take_ssid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ssid, ::std::string::String::new())
    }

    // int32 signalLevel = 2;


    pub fn get_signalLevel(&self) -> i32 {
        self.signalLevel
    }
    pub fn clear_signalLevel(&mut self) {
        self.signalLevel = 0;
    }

    // Param is passed by value, moved
    pub fn set_signalLevel(&mut self, v: i32) {
        self.signalLevel = v;
    }

    // string ipAddr = 3;


    pub fn get_ipAddr(&self) -> &str {
        &self.ipAddr
    }
    pub fn clear_ipAddr(&mut self) {
        self.ipAddr.clear();
    }

    // Param is passed by value, moved
    pub fn set_ipAddr(&mut self, v: ::std::string::String) {
        self.ipAddr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipAddr(&mut self) -> &mut ::std::string::String {
        &mut self.ipAddr
    }

    // Take field
    pub fn take_ipAddr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ipAddr, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LocalConnection {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ssid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.signalLevel = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ipAddr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ssid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ssid);
        }
        if self.signalLevel != 0 {
            my_size += ::protobuf::rt::value_size(2, self.signalLevel, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ipAddr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ipAddr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ssid.is_empty() {
            os.write_string(1, &self.ssid)?;
        }
        if self.signalLevel != 0 {
            os.write_int32(2, self.signalLevel)?;
        }
        if !self.ipAddr.is_empty() {
            os.write_string(3, &self.ipAddr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalConnection {
        LocalConnection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ssid",
                |m: &LocalConnection| { &m.ssid },
                |m: &mut LocalConnection| { &mut m.ssid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "signalLevel",
                |m: &LocalConnection| { &m.signalLevel },
                |m: &mut LocalConnection| { &mut m.signalLevel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ipAddr",
                |m: &LocalConnection| { &m.ipAddr },
                |m: &mut LocalConnection| { &mut m.ipAddr },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LocalConnection>(
                "LocalConnection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LocalConnection {
        static instance: ::protobuf::rt::LazyV2<LocalConnection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LocalConnection::new)
    }
}

impl ::protobuf::Clear for LocalConnection {
    fn clear(&mut self) {
        self.ssid.clear();
        self.signalLevel = 0;
        self.ipAddr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalConnection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalConnection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct MQTTConfig {
    // message fields
    pub url: ::std::string::String,
    pub port: i32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MQTTConfig {
    fn default() -> &'a MQTTConfig {
        <MQTTConfig as ::protobuf::Message>::default_instance()
    }
}

impl MQTTConfig {
    pub fn new() -> MQTTConfig {
        ::std::default::Default::default()
    }

    // string url = 1;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }

    // int32 port = 2;


    pub fn get_port(&self) -> i32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }
}

impl ::protobuf::Message for MQTTConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if self.port != 0 {
            os.write_int32(2, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MQTTConfig {
        MQTTConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &MQTTConfig| { &m.url },
                |m: &mut MQTTConfig| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "port",
                |m: &MQTTConfig| { &m.port },
                |m: &mut MQTTConfig| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MQTTConfig>(
                "MQTTConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MQTTConfig {
        static instance: ::protobuf::rt::LazyV2<MQTTConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MQTTConfig::new)
    }
}

impl ::protobuf::Clear for MQTTConfig {
    fn clear(&mut self) {
        self.url.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MQTTConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MQTTConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ComboardConfig {
    // message fields
    pub config: ::std::string::String,
    pub imple: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ComboardConfig {
    fn default() -> &'a ComboardConfig {
        <ComboardConfig as ::protobuf::Message>::default_instance()
    }
}

impl ComboardConfig {
    pub fn new() -> ComboardConfig {
        ::std::default::Default::default()
    }

    // string config = 1;


    pub fn get_config(&self) -> &str {
        &self.config
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::std::string::String) {
        self.config = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut ::std::string::String {
        &mut self.config
    }

    // Take field
    pub fn take_config(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.config, ::std::string::String::new())
    }

    // string imple = 2;


    pub fn get_imple(&self) -> &str {
        &self.imple
    }
    pub fn clear_imple(&mut self) {
        self.imple.clear();
    }

    // Param is passed by value, moved
    pub fn set_imple(&mut self, v: ::std::string::String) {
        self.imple = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imple(&mut self) -> &mut ::std::string::String {
        &mut self.imple
    }

    // Take field
    pub fn take_imple(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imple, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ComboardConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.config)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imple)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.config.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.config);
        }
        if !self.imple.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.imple);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.config.is_empty() {
            os.write_string(1, &self.config)?;
        }
        if !self.imple.is_empty() {
            os.write_string(2, &self.imple)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ComboardConfig {
        ComboardConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "config",
                |m: &ComboardConfig| { &m.config },
                |m: &mut ComboardConfig| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imple",
                |m: &ComboardConfig| { &m.imple },
                |m: &mut ComboardConfig| { &mut m.imple },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ComboardConfig>(
                "ComboardConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ComboardConfig {
        static instance: ::protobuf::rt::LazyV2<ComboardConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ComboardConfig::new)
    }
}

impl ::protobuf::Clear for ComboardConfig {
    fn clear(&mut self) {
        self.config.clear();
        self.imple.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ComboardConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComboardConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RunningComboard {
    // message fields
    pub imple: ::std::string::String,
    pub addr: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RunningComboard {
    fn default() -> &'a RunningComboard {
        <RunningComboard as ::protobuf::Message>::default_instance()
    }
}

impl RunningComboard {
    pub fn new() -> RunningComboard {
        ::std::default::Default::default()
    }

    // string imple = 1;


    pub fn get_imple(&self) -> &str {
        &self.imple
    }
    pub fn clear_imple(&mut self) {
        self.imple.clear();
    }

    // Param is passed by value, moved
    pub fn set_imple(&mut self, v: ::std::string::String) {
        self.imple = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imple(&mut self) -> &mut ::std::string::String {
        &mut self.imple
    }

    // Take field
    pub fn take_imple(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imple, ::std::string::String::new())
    }

    // string addr = 2;


    pub fn get_addr(&self) -> &str {
        &self.addr
    }
    pub fn clear_addr(&mut self) {
        self.addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: ::std::string::String) {
        self.addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr(&mut self) -> &mut ::std::string::String {
        &mut self.addr
    }

    // Take field
    pub fn take_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RunningComboard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imple)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imple.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imple);
        }
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imple.is_empty() {
            os.write_string(1, &self.imple)?;
        }
        if !self.addr.is_empty() {
            os.write_string(2, &self.addr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunningComboard {
        RunningComboard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imple",
                |m: &RunningComboard| { &m.imple },
                |m: &mut RunningComboard| { &mut m.imple },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "addr",
                |m: &RunningComboard| { &m.addr },
                |m: &mut RunningComboard| { &mut m.addr },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RunningComboard>(
                "RunningComboard",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RunningComboard {
        static instance: ::protobuf::rt::LazyV2<RunningComboard> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RunningComboard::new)
    }
}

impl ::protobuf::Clear for RunningComboard {
    fn clear(&mut self) {
        self.imple.clear();
        self.addr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunningComboard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunningComboard {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GrowbeCommand {
    // message fields
    pub topic: ::std::string::String,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrowbeCommand {
    fn default() -> &'a GrowbeCommand {
        <GrowbeCommand as ::protobuf::Message>::default_instance()
    }
}

impl GrowbeCommand {
    pub fn new() -> GrowbeCommand {
        ::std::default::Default::default()
    }

    // string topic = 1;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GrowbeCommand {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrowbeCommand {
        GrowbeCommand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &GrowbeCommand| { &m.topic },
                |m: &mut GrowbeCommand| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &GrowbeCommand| { &m.payload },
                |m: &mut GrowbeCommand| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrowbeCommand>(
                "GrowbeCommand",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrowbeCommand {
        static instance: ::protobuf::rt::LazyV2<GrowbeCommand> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrowbeCommand::new)
    }
}

impl ::protobuf::Clear for GrowbeCommand {
    fn clear(&mut self) {
        self.topic.clear();
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrowbeCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrowbeCommand {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct HttpServerConfig {
    // message fields
    pub addr: ::std::string::String,
    pub port: i32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpServerConfig {
    fn default() -> &'a HttpServerConfig {
        <HttpServerConfig as ::protobuf::Message>::default_instance()
    }
}

impl HttpServerConfig {
    pub fn new() -> HttpServerConfig {
        ::std::default::Default::default()
    }

    // string addr = 1;


    pub fn get_addr(&self) -> &str {
        &self.addr
    }
    pub fn clear_addr(&mut self) {
        self.addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: ::std::string::String) {
        self.addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr(&mut self) -> &mut ::std::string::String {
        &mut self.addr
    }

    // Take field
    pub fn take_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr, ::std::string::String::new())
    }

    // int32 port = 2;


    pub fn get_port(&self) -> i32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }
}

impl ::protobuf::Message for HttpServerConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.addr);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.addr.is_empty() {
            os.write_string(1, &self.addr)?;
        }
        if self.port != 0 {
            os.write_int32(2, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpServerConfig {
        HttpServerConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "addr",
                |m: &HttpServerConfig| { &m.addr },
                |m: &mut HttpServerConfig| { &mut m.addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "port",
                |m: &HttpServerConfig| { &m.port },
                |m: &mut HttpServerConfig| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpServerConfig>(
                "HttpServerConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpServerConfig {
        static instance: ::protobuf::rt::LazyV2<HttpServerConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpServerConfig::new)
    }
}

impl ::protobuf::Clear for HttpServerConfig {
    fn clear(&mut self) {
        self.addr.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpServerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpServerConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct LoggerConfig {
    // message fields
    pub target: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoggerConfig {
    fn default() -> &'a LoggerConfig {
        <LoggerConfig as ::protobuf::Message>::default_instance()
    }
}

impl LoggerConfig {
    pub fn new() -> LoggerConfig {
        ::std::default::Default::default()
    }

    // string target = 1;


    pub fn get_target(&self) -> &str {
        &self.target
    }
    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::std::string::String) {
        self.target = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut ::std::string::String {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.target, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LoggerConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.target)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.target.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.target);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.target.is_empty() {
            os.write_string(1, &self.target)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoggerConfig {
        LoggerConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "target",
                |m: &LoggerConfig| { &m.target },
                |m: &mut LoggerConfig| { &mut m.target },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LoggerConfig>(
                "LoggerConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LoggerConfig {
        static instance: ::protobuf::rt::LazyV2<LoggerConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LoggerConfig::new)
    }
}

impl ::protobuf::Clear for LoggerConfig {
    fn clear(&mut self) {
        self.target.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoggerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoggerConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct UpdaterConfig {
    // message fields
    pub autoupdate: bool,
    pub channel: ::std::string::String,
    pub reboot: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdaterConfig {
    fn default() -> &'a UpdaterConfig {
        <UpdaterConfig as ::protobuf::Message>::default_instance()
    }
}

impl UpdaterConfig {
    pub fn new() -> UpdaterConfig {
        ::std::default::Default::default()
    }

    // bool autoupdate = 1;


    pub fn get_autoupdate(&self) -> bool {
        self.autoupdate
    }
    pub fn clear_autoupdate(&mut self) {
        self.autoupdate = false;
    }

    // Param is passed by value, moved
    pub fn set_autoupdate(&mut self, v: bool) {
        self.autoupdate = v;
    }

    // string channel = 2;


    pub fn get_channel(&self) -> &str {
        &self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: ::std::string::String) {
        self.channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel(&mut self) -> &mut ::std::string::String {
        &mut self.channel
    }

    // Take field
    pub fn take_channel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel, ::std::string::String::new())
    }

    // bool reboot = 3;


    pub fn get_reboot(&self) -> bool {
        self.reboot
    }
    pub fn clear_reboot(&mut self) {
        self.reboot = false;
    }

    // Param is passed by value, moved
    pub fn set_reboot(&mut self, v: bool) {
        self.reboot = v;
    }
}

impl ::protobuf::Message for UpdaterConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.autoupdate = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.reboot = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.autoupdate != false {
            my_size += 2;
        }
        if !self.channel.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.channel);
        }
        if self.reboot != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.autoupdate != false {
            os.write_bool(1, self.autoupdate)?;
        }
        if !self.channel.is_empty() {
            os.write_string(2, &self.channel)?;
        }
        if self.reboot != false {
            os.write_bool(3, self.reboot)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdaterConfig {
        UpdaterConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "autoupdate",
                |m: &UpdaterConfig| { &m.autoupdate },
                |m: &mut UpdaterConfig| { &mut m.autoupdate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel",
                |m: &UpdaterConfig| { &m.channel },
                |m: &mut UpdaterConfig| { &mut m.channel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "reboot",
                |m: &UpdaterConfig| { &m.reboot },
                |m: &mut UpdaterConfig| { &mut m.reboot },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdaterConfig>(
                "UpdaterConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdaterConfig {
        static instance: ::protobuf::rt::LazyV2<UpdaterConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdaterConfig::new)
    }
}

impl ::protobuf::Clear for UpdaterConfig {
    fn clear(&mut self) {
        self.autoupdate = false;
        self.channel.clear();
        self.reboot = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdaterConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdaterConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ApiConfig {
    // message fields
    pub url: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApiConfig {
    fn default() -> &'a ApiConfig {
        <ApiConfig as ::protobuf::Message>::default_instance()
    }
}

impl ApiConfig {
    pub fn new() -> ApiConfig {
        ::std::default::Default::default()
    }

    // string url = 1;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ApiConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApiConfig {
        ApiConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &ApiConfig| { &m.url },
                |m: &mut ApiConfig| { &mut m.url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApiConfig>(
                "ApiConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApiConfig {
        static instance: ::protobuf::rt::LazyV2<ApiConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApiConfig::new)
    }
}

impl ::protobuf::Clear for ApiConfig {
    fn clear(&mut self) {
        self.url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApiConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ReverseProxyConfig {
    // message fields
    pub url: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReverseProxyConfig {
    fn default() -> &'a ReverseProxyConfig {
        <ReverseProxyConfig as ::protobuf::Message>::default_instance()
    }
}

impl ReverseProxyConfig {
    pub fn new() -> ReverseProxyConfig {
        ::std::default::Default::default()
    }

    // string url = 1;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReverseProxyConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReverseProxyConfig {
        ReverseProxyConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &ReverseProxyConfig| { &m.url },
                |m: &mut ReverseProxyConfig| { &mut m.url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReverseProxyConfig>(
                "ReverseProxyConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReverseProxyConfig {
        static instance: ::protobuf::rt::LazyV2<ReverseProxyConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReverseProxyConfig::new)
    }
}

impl ::protobuf::Clear for ReverseProxyConfig {
    fn clear(&mut self) {
        self.url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReverseProxyConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReverseProxyConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct MainboardConfig {
    // message fields
    pub id: ::std::string::String,
    pub mqtt: ::protobuf::SingularPtrField<MQTTConfig>,
    pub comboard: ::protobuf::SingularPtrField<ComboardConfig>,
    pub comboards: ::protobuf::RepeatedField<ComboardConfig>,
    pub server: ::protobuf::SingularPtrField<HttpServerConfig>,
    pub logger: ::protobuf::SingularPtrField<LoggerConfig>,
    pub update: ::protobuf::SingularPtrField<UpdaterConfig>,
    pub api: ::protobuf::SingularPtrField<ApiConfig>,
    pub proxy: ::protobuf::SingularPtrField<ReverseProxyConfig>,
    pub sync: ::protobuf::SingularPtrField<super::sync::SyncInfo>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MainboardConfig {
    fn default() -> &'a MainboardConfig {
        <MainboardConfig as ::protobuf::Message>::default_instance()
    }
}

impl MainboardConfig {
    pub fn new() -> MainboardConfig {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .MQTTConfig mqtt = 2;


    pub fn get_mqtt(&self) -> &MQTTConfig {
        self.mqtt.as_ref().unwrap_or_else(|| <MQTTConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_mqtt(&mut self) {
        self.mqtt.clear();
    }

    pub fn has_mqtt(&self) -> bool {
        self.mqtt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mqtt(&mut self, v: MQTTConfig) {
        self.mqtt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mqtt(&mut self) -> &mut MQTTConfig {
        if self.mqtt.is_none() {
            self.mqtt.set_default();
        }
        self.mqtt.as_mut().unwrap()
    }

    // Take field
    pub fn take_mqtt(&mut self) -> MQTTConfig {
        self.mqtt.take().unwrap_or_else(|| MQTTConfig::new())
    }

    // .ComboardConfig comboard = 3;


    pub fn get_comboard(&self) -> &ComboardConfig {
        self.comboard.as_ref().unwrap_or_else(|| <ComboardConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_comboard(&mut self) {
        self.comboard.clear();
    }

    pub fn has_comboard(&self) -> bool {
        self.comboard.is_some()
    }

    // Param is passed by value, moved
    pub fn set_comboard(&mut self, v: ComboardConfig) {
        self.comboard = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comboard(&mut self) -> &mut ComboardConfig {
        if self.comboard.is_none() {
            self.comboard.set_default();
        }
        self.comboard.as_mut().unwrap()
    }

    // Take field
    pub fn take_comboard(&mut self) -> ComboardConfig {
        self.comboard.take().unwrap_or_else(|| ComboardConfig::new())
    }

    // repeated .ComboardConfig comboards = 7;


    pub fn get_comboards(&self) -> &[ComboardConfig] {
        &self.comboards
    }
    pub fn clear_comboards(&mut self) {
        self.comboards.clear();
    }

    // Param is passed by value, moved
    pub fn set_comboards(&mut self, v: ::protobuf::RepeatedField<ComboardConfig>) {
        self.comboards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_comboards(&mut self) -> &mut ::protobuf::RepeatedField<ComboardConfig> {
        &mut self.comboards
    }

    // Take field
    pub fn take_comboards(&mut self) -> ::protobuf::RepeatedField<ComboardConfig> {
        ::std::mem::replace(&mut self.comboards, ::protobuf::RepeatedField::new())
    }

    // .HttpServerConfig server = 4;


    pub fn get_server(&self) -> &HttpServerConfig {
        self.server.as_ref().unwrap_or_else(|| <HttpServerConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_server(&mut self) {
        self.server.clear();
    }

    pub fn has_server(&self) -> bool {
        self.server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server(&mut self, v: HttpServerConfig) {
        self.server = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server(&mut self) -> &mut HttpServerConfig {
        if self.server.is_none() {
            self.server.set_default();
        }
        self.server.as_mut().unwrap()
    }

    // Take field
    pub fn take_server(&mut self) -> HttpServerConfig {
        self.server.take().unwrap_or_else(|| HttpServerConfig::new())
    }

    // .LoggerConfig logger = 5;


    pub fn get_logger(&self) -> &LoggerConfig {
        self.logger.as_ref().unwrap_or_else(|| <LoggerConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logger(&mut self) {
        self.logger.clear();
    }

    pub fn has_logger(&self) -> bool {
        self.logger.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logger(&mut self, v: LoggerConfig) {
        self.logger = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logger(&mut self) -> &mut LoggerConfig {
        if self.logger.is_none() {
            self.logger.set_default();
        }
        self.logger.as_mut().unwrap()
    }

    // Take field
    pub fn take_logger(&mut self) -> LoggerConfig {
        self.logger.take().unwrap_or_else(|| LoggerConfig::new())
    }

    // .UpdaterConfig update = 6;


    pub fn get_update(&self) -> &UpdaterConfig {
        self.update.as_ref().unwrap_or_else(|| <UpdaterConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update(&mut self) {
        self.update.clear();
    }

    pub fn has_update(&self) -> bool {
        self.update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: UpdaterConfig) {
        self.update = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update(&mut self) -> &mut UpdaterConfig {
        if self.update.is_none() {
            self.update.set_default();
        }
        self.update.as_mut().unwrap()
    }

    // Take field
    pub fn take_update(&mut self) -> UpdaterConfig {
        self.update.take().unwrap_or_else(|| UpdaterConfig::new())
    }

    // .ApiConfig api = 8;


    pub fn get_api(&self) -> &ApiConfig {
        self.api.as_ref().unwrap_or_else(|| <ApiConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_api(&mut self) {
        self.api.clear();
    }

    pub fn has_api(&self) -> bool {
        self.api.is_some()
    }

    // Param is passed by value, moved
    pub fn set_api(&mut self, v: ApiConfig) {
        self.api = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_api(&mut self) -> &mut ApiConfig {
        if self.api.is_none() {
            self.api.set_default();
        }
        self.api.as_mut().unwrap()
    }

    // Take field
    pub fn take_api(&mut self) -> ApiConfig {
        self.api.take().unwrap_or_else(|| ApiConfig::new())
    }

    // .ReverseProxyConfig proxy = 9;


    pub fn get_proxy(&self) -> &ReverseProxyConfig {
        self.proxy.as_ref().unwrap_or_else(|| <ReverseProxyConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proxy(&mut self) {
        self.proxy.clear();
    }

    pub fn has_proxy(&self) -> bool {
        self.proxy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proxy(&mut self, v: ReverseProxyConfig) {
        self.proxy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proxy(&mut self) -> &mut ReverseProxyConfig {
        if self.proxy.is_none() {
            self.proxy.set_default();
        }
        self.proxy.as_mut().unwrap()
    }

    // Take field
    pub fn take_proxy(&mut self) -> ReverseProxyConfig {
        self.proxy.take().unwrap_or_else(|| ReverseProxyConfig::new())
    }

    // .SyncInfo sync = 20;


    pub fn get_sync(&self) -> &super::sync::SyncInfo {
        self.sync.as_ref().unwrap_or_else(|| <super::sync::SyncInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sync(&mut self) {
        self.sync.clear();
    }

    pub fn has_sync(&self) -> bool {
        self.sync.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sync(&mut self, v: super::sync::SyncInfo) {
        self.sync = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sync(&mut self) -> &mut super::sync::SyncInfo {
        if self.sync.is_none() {
            self.sync.set_default();
        }
        self.sync.as_mut().unwrap()
    }

    // Take field
    pub fn take_sync(&mut self) -> super::sync::SyncInfo {
        self.sync.take().unwrap_or_else(|| super::sync::SyncInfo::new())
    }
}

impl ::protobuf::Message for MainboardConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.mqtt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.comboard {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.comboards {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.server {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.logger {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.api {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proxy {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sync {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mqtt)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.comboard)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.comboards)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.server)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logger)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.api)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proxy)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sync)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let Some(ref v) = self.mqtt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.comboard.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.comboards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.server.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.logger.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.api.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.proxy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sync.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let Some(ref v) = self.mqtt.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.comboard.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.comboards {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.server.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.logger.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.api.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.proxy.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sync.as_ref() {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MainboardConfig {
        MainboardConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &MainboardConfig| { &m.id },
                |m: &mut MainboardConfig| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MQTTConfig>>(
                "mqtt",
                |m: &MainboardConfig| { &m.mqtt },
                |m: &mut MainboardConfig| { &mut m.mqtt },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ComboardConfig>>(
                "comboard",
                |m: &MainboardConfig| { &m.comboard },
                |m: &mut MainboardConfig| { &mut m.comboard },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ComboardConfig>>(
                "comboards",
                |m: &MainboardConfig| { &m.comboards },
                |m: &mut MainboardConfig| { &mut m.comboards },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpServerConfig>>(
                "server",
                |m: &MainboardConfig| { &m.server },
                |m: &mut MainboardConfig| { &mut m.server },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LoggerConfig>>(
                "logger",
                |m: &MainboardConfig| { &m.logger },
                |m: &mut MainboardConfig| { &mut m.logger },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpdaterConfig>>(
                "update",
                |m: &MainboardConfig| { &m.update },
                |m: &mut MainboardConfig| { &mut m.update },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApiConfig>>(
                "api",
                |m: &MainboardConfig| { &m.api },
                |m: &mut MainboardConfig| { &mut m.api },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReverseProxyConfig>>(
                "proxy",
                |m: &MainboardConfig| { &m.proxy },
                |m: &mut MainboardConfig| { &mut m.proxy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::sync::SyncInfo>>(
                "sync",
                |m: &MainboardConfig| { &m.sync },
                |m: &mut MainboardConfig| { &mut m.sync },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MainboardConfig>(
                "MainboardConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MainboardConfig {
        static instance: ::protobuf::rt::LazyV2<MainboardConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MainboardConfig::new)
    }
}

impl ::protobuf::Clear for MainboardConfig {
    fn clear(&mut self) {
        self.id.clear();
        self.mqtt.clear();
        self.comboard.clear();
        self.comboards.clear();
        self.server.clear();
        self.logger.clear();
        self.update.clear();
        self.api.clear();
        self.proxy.clear();
        self.sync.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MainboardConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MainboardConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum CommandConnectionType {
    MQTT = 0,
    WS_PROXY = 1,
}

impl ::protobuf::ProtobufEnum for CommandConnectionType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CommandConnectionType> {
        match value {
            0 => ::std::option::Option::Some(CommandConnectionType::MQTT),
            1 => ::std::option::Option::Some(CommandConnectionType::WS_PROXY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CommandConnectionType] = &[
            CommandConnectionType::MQTT,
            CommandConnectionType::WS_PROXY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CommandConnectionType>("CommandConnectionType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CommandConnectionType {
}

impl ::std::default::Default for CommandConnectionType {
    fn default() -> Self {
        CommandConnectionType::MQTT
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandConnectionType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bboard.proto\x1a\nsync.proto\"\xae\x01\n\x15GrowbeMainboardConfig\
    \x12\x20\n\x0bhearthBeath\x18\x01\x20\x01(\x05R\x0bhearthBeath\x12T\n\
    \x19preferedCommandConnection\x18\x02\x20\x01(\x0e2\x16.CommandConnectio\
    nTypeR\x19preferedCommandConnection\x12\x1d\n\x04sync\x18\x14\x20\x01(\
    \x0b2\t.SyncInfoR\x04sync\"\xbf\x01\n\x0fHostInformation\x12\x1a\n\x08ho\
    stname\x18\x01\x20\x01(\tR\x08hostname\x12\x16\n\x06kernel\x18\x02\x20\
    \x01(\tR\x06kernel\x12$\n\rkernelVersion\x18\x03\x20\x01(\tR\rkernelVers\
    ion\x12\"\n\x0carchitecture\x18\x04\x20\x01(\tR\x0carchitecture\x12\x0e\
    \n\x02os\x18\x05\x20\x01(\tR\x02os\x12\x1e\n\ndeviceType\x18\x06\x20\x01\
    (\tR\ndeviceType\"\xab\x01\n\tHelloWord\x12\x18\n\x07version\x18\x01\x20\
    \x01(\tR\x07version\x12\"\n\x0ccloudVersion\x18\x02\x20\x01(\tR\x0ccloud\
    Version\x12\x10\n\x03RTC\x18\x03\x20\x01(\tR\x03RTC\x12(\n\x06boards\x18\
    \x04\x20\x03(\x0b2\x10.RunningComboardR\x06boards\x12$\n\x04host\x18\x05\
    \x20\x01(\x0b2\x10.HostInformationR\x04host\"D\n\x0eVersionRelease\x12\
    \x18\n\x07version\x18\x01\x20\x01(\tR\x07version\x12\x18\n\x07channel\
    \x18\x02\x20\x01(\tR\x07channel\"G\n\rUpdateExecute\x12\x18\n\x07version\
    \x18\x01\x20\x01(\tR\x07version\x12\x1c\n\trestarted\x18\x02\x20\x01(\
    \x08R\trestarted\"\x10\n\x0eRestartRequest\"_\n\x0fLocalConnection\x12\
    \x12\n\x04ssid\x18\x01\x20\x01(\tR\x04ssid\x12\x20\n\x0bsignalLevel\x18\
    \x02\x20\x01(\x05R\x0bsignalLevel\x12\x16\n\x06ipAddr\x18\x03\x20\x01(\t\
    R\x06ipAddr\"2\n\nMQTTConfig\x12\x10\n\x03url\x18\x01\x20\x01(\tR\x03url\
    \x12\x12\n\x04port\x18\x02\x20\x01(\x05R\x04port\">\n\x0eComboardConfig\
    \x12\x16\n\x06config\x18\x01\x20\x01(\tR\x06config\x12\x14\n\x05imple\
    \x18\x02\x20\x01(\tR\x05imple\";\n\x0fRunningComboard\x12\x14\n\x05imple\
    \x18\x01\x20\x01(\tR\x05imple\x12\x12\n\x04addr\x18\x02\x20\x01(\tR\x04a\
    ddr\"?\n\rGrowbeCommand\x12\x14\n\x05topic\x18\x01\x20\x01(\tR\x05topic\
    \x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\":\n\x10HttpServe\
    rConfig\x12\x12\n\x04addr\x18\x01\x20\x01(\tR\x04addr\x12\x12\n\x04port\
    \x18\x02\x20\x01(\x05R\x04port\"&\n\x0cLoggerConfig\x12\x16\n\x06target\
    \x18\x01\x20\x01(\tR\x06target\"a\n\rUpdaterConfig\x12\x1e\n\nautoupdate\
    \x18\x01\x20\x01(\x08R\nautoupdate\x12\x18\n\x07channel\x18\x02\x20\x01(\
    \tR\x07channel\x12\x16\n\x06reboot\x18\x03\x20\x01(\x08R\x06reboot\"\x1d\
    \n\tApiConfig\x12\x10\n\x03url\x18\x01\x20\x01(\tR\x03url\"&\n\x12Revers\
    eProxyConfig\x12\x10\n\x03url\x18\x01\x20\x01(\tR\x03url\"\x80\x03\n\x0f\
    MainboardConfig\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x1f\n\x04m\
    qtt\x18\x02\x20\x01(\x0b2\x0b.MQTTConfigR\x04mqtt\x12+\n\x08comboard\x18\
    \x03\x20\x01(\x0b2\x0f.ComboardConfigR\x08comboard\x12-\n\tcomboards\x18\
    \x07\x20\x03(\x0b2\x0f.ComboardConfigR\tcomboards\x12)\n\x06server\x18\
    \x04\x20\x01(\x0b2\x11.HttpServerConfigR\x06server\x12%\n\x06logger\x18\
    \x05\x20\x01(\x0b2\r.LoggerConfigR\x06logger\x12&\n\x06update\x18\x06\
    \x20\x01(\x0b2\x0e.UpdaterConfigR\x06update\x12\x1c\n\x03api\x18\x08\x20\
    \x01(\x0b2\n.ApiConfigR\x03api\x12)\n\x05proxy\x18\t\x20\x01(\x0b2\x13.R\
    everseProxyConfigR\x05proxy\x12\x1d\n\x04sync\x18\x14\x20\x01(\x0b2\t.Sy\
    ncInfoR\x04sync*/\n\x15CommandConnectionType\x12\x08\n\x04MQTT\x10\0\x12\
    \x0c\n\x08WS_PROXY\x10\x01B+\n)ca.berlingoqc.growbe_android_module.proto\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
