// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `module.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ModuleData {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub readCount: i32,
    pub boardVersion: ::std::string::String,
    pub plug: bool,
    pub atIndex: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModuleData {
    fn default() -> &'a ModuleData {
        <ModuleData as ::protobuf::Message>::default_instance()
    }
}

impl ModuleData {
    pub fn new() -> ModuleData {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 readCount = 4;


    pub fn get_readCount(&self) -> i32 {
        self.readCount
    }
    pub fn clear_readCount(&mut self) {
        self.readCount = 0;
    }

    // Param is passed by value, moved
    pub fn set_readCount(&mut self, v: i32) {
        self.readCount = v;
    }

    // string boardVersion = 5;


    pub fn get_boardVersion(&self) -> &str {
        &self.boardVersion
    }
    pub fn clear_boardVersion(&mut self) {
        self.boardVersion.clear();
    }

    // Param is passed by value, moved
    pub fn set_boardVersion(&mut self, v: ::std::string::String) {
        self.boardVersion = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boardVersion(&mut self) -> &mut ::std::string::String {
        &mut self.boardVersion
    }

    // Take field
    pub fn take_boardVersion(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.boardVersion, ::std::string::String::new())
    }

    // bool plug = 6;


    pub fn get_plug(&self) -> bool {
        self.plug
    }
    pub fn clear_plug(&mut self) {
        self.plug = false;
    }

    // Param is passed by value, moved
    pub fn set_plug(&mut self, v: bool) {
        self.plug = v;
    }

    // int32 atIndex = 7;


    pub fn get_atIndex(&self) -> i32 {
        self.atIndex
    }
    pub fn clear_atIndex(&mut self) {
        self.atIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_atIndex(&mut self, v: i32) {
        self.atIndex = v;
    }
}

impl ::protobuf::Message for ModuleData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.readCount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.boardVersion)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.plug = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.atIndex = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.readCount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.readCount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.boardVersion.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.boardVersion);
        }
        if self.plug != false {
            my_size += 2;
        }
        if self.atIndex != 0 {
            my_size += ::protobuf::rt::value_size(7, self.atIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.readCount != 0 {
            os.write_int32(4, self.readCount)?;
        }
        if !self.boardVersion.is_empty() {
            os.write_string(5, &self.boardVersion)?;
        }
        if self.plug != false {
            os.write_bool(6, self.plug)?;
        }
        if self.atIndex != 0 {
            os.write_int32(7, self.atIndex)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModuleData {
        ModuleData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &ModuleData| { &m.id },
                |m: &mut ModuleData| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ModuleData| { &m.name },
                |m: &mut ModuleData| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "readCount",
                |m: &ModuleData| { &m.readCount },
                |m: &mut ModuleData| { &mut m.readCount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "boardVersion",
                |m: &ModuleData| { &m.boardVersion },
                |m: &mut ModuleData| { &mut m.boardVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "plug",
                |m: &ModuleData| { &m.plug },
                |m: &mut ModuleData| { &mut m.plug },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "atIndex",
                |m: &ModuleData| { &m.atIndex },
                |m: &mut ModuleData| { &mut m.atIndex },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ModuleData>(
                "ModuleData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ModuleData {
        static instance: ::protobuf::rt::LazyV2<ModuleData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ModuleData::new)
    }
}

impl ::protobuf::Clear for ModuleData {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.readCount = 0;
        self.boardVersion.clear();
        self.plug = false;
        self.atIndex = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModuleData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModuleData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct THLModuleData {
    // message fields
    pub humidity: f32,
    pub airTemperature: f32,
    pub timestamp: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a THLModuleData {
    fn default() -> &'a THLModuleData {
        <THLModuleData as ::protobuf::Message>::default_instance()
    }
}

impl THLModuleData {
    pub fn new() -> THLModuleData {
        ::std::default::Default::default()
    }

    // float humidity = 2;


    pub fn get_humidity(&self) -> f32 {
        self.humidity
    }
    pub fn clear_humidity(&mut self) {
        self.humidity = 0.;
    }

    // Param is passed by value, moved
    pub fn set_humidity(&mut self, v: f32) {
        self.humidity = v;
    }

    // float airTemperature = 3;


    pub fn get_airTemperature(&self) -> f32 {
        self.airTemperature
    }
    pub fn clear_airTemperature(&mut self) {
        self.airTemperature = 0.;
    }

    // Param is passed by value, moved
    pub fn set_airTemperature(&mut self, v: f32) {
        self.airTemperature = v;
    }

    // int32 timestamp = 9;


    pub fn get_timestamp(&self) -> i32 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i32) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for THLModuleData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.humidity = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.airTemperature = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.humidity != 0. {
            my_size += 5;
        }
        if self.airTemperature != 0. {
            my_size += 5;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(9, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.humidity != 0. {
            os.write_float(2, self.humidity)?;
        }
        if self.airTemperature != 0. {
            os.write_float(3, self.airTemperature)?;
        }
        if self.timestamp != 0 {
            os.write_int32(9, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> THLModuleData {
        THLModuleData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "humidity",
                |m: &THLModuleData| { &m.humidity },
                |m: &mut THLModuleData| { &mut m.humidity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "airTemperature",
                |m: &THLModuleData| { &m.airTemperature },
                |m: &mut THLModuleData| { &mut m.airTemperature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "timestamp",
                |m: &THLModuleData| { &m.timestamp },
                |m: &mut THLModuleData| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<THLModuleData>(
                "THLModuleData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static THLModuleData {
        static instance: ::protobuf::rt::LazyV2<THLModuleData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(THLModuleData::new)
    }
}

impl ::protobuf::Clear for THLModuleData {
    fn clear(&mut self) {
        self.humidity = 0.;
        self.airTemperature = 0.;
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for THLModuleData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for THLModuleData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SOILModuleData {
    // message fields
    pub p0: i32,
    pub p1: i32,
    pub p2: i32,
    pub p3: i32,
    pub p4: i32,
    pub p5: i32,
    pub p6: i32,
    pub p7: i32,
    pub timestamp: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SOILModuleData {
    fn default() -> &'a SOILModuleData {
        <SOILModuleData as ::protobuf::Message>::default_instance()
    }
}

impl SOILModuleData {
    pub fn new() -> SOILModuleData {
        ::std::default::Default::default()
    }

    // int32 p0 = 1;


    pub fn get_p0(&self) -> i32 {
        self.p0
    }
    pub fn clear_p0(&mut self) {
        self.p0 = 0;
    }

    // Param is passed by value, moved
    pub fn set_p0(&mut self, v: i32) {
        self.p0 = v;
    }

    // int32 p1 = 2;


    pub fn get_p1(&self) -> i32 {
        self.p1
    }
    pub fn clear_p1(&mut self) {
        self.p1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_p1(&mut self, v: i32) {
        self.p1 = v;
    }

    // int32 p2 = 3;


    pub fn get_p2(&self) -> i32 {
        self.p2
    }
    pub fn clear_p2(&mut self) {
        self.p2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_p2(&mut self, v: i32) {
        self.p2 = v;
    }

    // int32 p3 = 4;


    pub fn get_p3(&self) -> i32 {
        self.p3
    }
    pub fn clear_p3(&mut self) {
        self.p3 = 0;
    }

    // Param is passed by value, moved
    pub fn set_p3(&mut self, v: i32) {
        self.p3 = v;
    }

    // int32 p4 = 5;


    pub fn get_p4(&self) -> i32 {
        self.p4
    }
    pub fn clear_p4(&mut self) {
        self.p4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_p4(&mut self, v: i32) {
        self.p4 = v;
    }

    // int32 p5 = 6;


    pub fn get_p5(&self) -> i32 {
        self.p5
    }
    pub fn clear_p5(&mut self) {
        self.p5 = 0;
    }

    // Param is passed by value, moved
    pub fn set_p5(&mut self, v: i32) {
        self.p5 = v;
    }

    // int32 p6 = 7;


    pub fn get_p6(&self) -> i32 {
        self.p6
    }
    pub fn clear_p6(&mut self) {
        self.p6 = 0;
    }

    // Param is passed by value, moved
    pub fn set_p6(&mut self, v: i32) {
        self.p6 = v;
    }

    // int32 p7 = 8;


    pub fn get_p7(&self) -> i32 {
        self.p7
    }
    pub fn clear_p7(&mut self) {
        self.p7 = 0;
    }

    // Param is passed by value, moved
    pub fn set_p7(&mut self, v: i32) {
        self.p7 = v;
    }

    // int32 timestamp = 9;


    pub fn get_timestamp(&self) -> i32 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i32) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for SOILModuleData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.p0 = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.p1 = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.p2 = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.p3 = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.p4 = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.p5 = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.p6 = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.p7 = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.p0 != 0 {
            my_size += ::protobuf::rt::value_size(1, self.p0, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.p1 != 0 {
            my_size += ::protobuf::rt::value_size(2, self.p1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.p2 != 0 {
            my_size += ::protobuf::rt::value_size(3, self.p2, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.p3 != 0 {
            my_size += ::protobuf::rt::value_size(4, self.p3, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.p4 != 0 {
            my_size += ::protobuf::rt::value_size(5, self.p4, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.p5 != 0 {
            my_size += ::protobuf::rt::value_size(6, self.p5, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.p6 != 0 {
            my_size += ::protobuf::rt::value_size(7, self.p6, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.p7 != 0 {
            my_size += ::protobuf::rt::value_size(8, self.p7, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(9, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.p0 != 0 {
            os.write_int32(1, self.p0)?;
        }
        if self.p1 != 0 {
            os.write_int32(2, self.p1)?;
        }
        if self.p2 != 0 {
            os.write_int32(3, self.p2)?;
        }
        if self.p3 != 0 {
            os.write_int32(4, self.p3)?;
        }
        if self.p4 != 0 {
            os.write_int32(5, self.p4)?;
        }
        if self.p5 != 0 {
            os.write_int32(6, self.p5)?;
        }
        if self.p6 != 0 {
            os.write_int32(7, self.p6)?;
        }
        if self.p7 != 0 {
            os.write_int32(8, self.p7)?;
        }
        if self.timestamp != 0 {
            os.write_int32(9, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SOILModuleData {
        SOILModuleData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "p0",
                |m: &SOILModuleData| { &m.p0 },
                |m: &mut SOILModuleData| { &mut m.p0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "p1",
                |m: &SOILModuleData| { &m.p1 },
                |m: &mut SOILModuleData| { &mut m.p1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "p2",
                |m: &SOILModuleData| { &m.p2 },
                |m: &mut SOILModuleData| { &mut m.p2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "p3",
                |m: &SOILModuleData| { &m.p3 },
                |m: &mut SOILModuleData| { &mut m.p3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "p4",
                |m: &SOILModuleData| { &m.p4 },
                |m: &mut SOILModuleData| { &mut m.p4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "p5",
                |m: &SOILModuleData| { &m.p5 },
                |m: &mut SOILModuleData| { &mut m.p5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "p6",
                |m: &SOILModuleData| { &m.p6 },
                |m: &mut SOILModuleData| { &mut m.p6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "p7",
                |m: &SOILModuleData| { &m.p7 },
                |m: &mut SOILModuleData| { &mut m.p7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "timestamp",
                |m: &SOILModuleData| { &m.timestamp },
                |m: &mut SOILModuleData| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SOILModuleData>(
                "SOILModuleData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SOILModuleData {
        static instance: ::protobuf::rt::LazyV2<SOILModuleData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SOILModuleData::new)
    }
}

impl ::protobuf::Clear for SOILModuleData {
    fn clear(&mut self) {
        self.p0 = 0;
        self.p1 = 0;
        self.p2 = 0;
        self.p3 = 0;
        self.p4 = 0;
        self.p5 = 0;
        self.p6 = 0;
        self.p7 = 0;
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SOILModuleData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SOILModuleData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WAModuleData {
    // message fields
    pub PH: i32,
    pub EC: i32,
    pub temperature: i32,
    pub timestamp: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WAModuleData {
    fn default() -> &'a WAModuleData {
        <WAModuleData as ::protobuf::Message>::default_instance()
    }
}

impl WAModuleData {
    pub fn new() -> WAModuleData {
        ::std::default::Default::default()
    }

    // int32 PH = 2;


    pub fn get_PH(&self) -> i32 {
        self.PH
    }
    pub fn clear_PH(&mut self) {
        self.PH = 0;
    }

    // Param is passed by value, moved
    pub fn set_PH(&mut self, v: i32) {
        self.PH = v;
    }

    // int32 EC = 3;


    pub fn get_EC(&self) -> i32 {
        self.EC
    }
    pub fn clear_EC(&mut self) {
        self.EC = 0;
    }

    // Param is passed by value, moved
    pub fn set_EC(&mut self, v: i32) {
        self.EC = v;
    }

    // int32 temperature = 4;


    pub fn get_temperature(&self) -> i32 {
        self.temperature
    }
    pub fn clear_temperature(&mut self) {
        self.temperature = 0;
    }

    // Param is passed by value, moved
    pub fn set_temperature(&mut self, v: i32) {
        self.temperature = v;
    }

    // int32 timestamp = 9;


    pub fn get_timestamp(&self) -> i32 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i32) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for WAModuleData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.PH = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.EC = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.temperature = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.PH != 0 {
            my_size += ::protobuf::rt::value_size(2, self.PH, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.EC != 0 {
            my_size += ::protobuf::rt::value_size(3, self.EC, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.temperature != 0 {
            my_size += ::protobuf::rt::value_size(4, self.temperature, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(9, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.PH != 0 {
            os.write_int32(2, self.PH)?;
        }
        if self.EC != 0 {
            os.write_int32(3, self.EC)?;
        }
        if self.temperature != 0 {
            os.write_int32(4, self.temperature)?;
        }
        if self.timestamp != 0 {
            os.write_int32(9, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WAModuleData {
        WAModuleData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "PH",
                |m: &WAModuleData| { &m.PH },
                |m: &mut WAModuleData| { &mut m.PH },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "EC",
                |m: &WAModuleData| { &m.EC },
                |m: &mut WAModuleData| { &mut m.EC },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "temperature",
                |m: &WAModuleData| { &m.temperature },
                |m: &mut WAModuleData| { &mut m.temperature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "timestamp",
                |m: &WAModuleData| { &m.timestamp },
                |m: &mut WAModuleData| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WAModuleData>(
                "WAModuleData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WAModuleData {
        static instance: ::protobuf::rt::LazyV2<WAModuleData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WAModuleData::new)
    }
}

impl ::protobuf::Clear for WAModuleData {
    fn clear(&mut self) {
        self.PH = 0;
        self.EC = 0;
        self.temperature = 0;
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WAModuleData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WAModuleData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CronItem {
    // message fields
    pub minute: i32,
    pub hour: i32,
    pub dayMonth: i32,
    pub month: i32,
    pub dayWeek: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CronItem {
    fn default() -> &'a CronItem {
        <CronItem as ::protobuf::Message>::default_instance()
    }
}

impl CronItem {
    pub fn new() -> CronItem {
        ::std::default::Default::default()
    }

    // int32 minute = 1;


    pub fn get_minute(&self) -> i32 {
        self.minute
    }
    pub fn clear_minute(&mut self) {
        self.minute = 0;
    }

    // Param is passed by value, moved
    pub fn set_minute(&mut self, v: i32) {
        self.minute = v;
    }

    // int32 hour = 2;


    pub fn get_hour(&self) -> i32 {
        self.hour
    }
    pub fn clear_hour(&mut self) {
        self.hour = 0;
    }

    // Param is passed by value, moved
    pub fn set_hour(&mut self, v: i32) {
        self.hour = v;
    }

    // int32 dayMonth = 3;


    pub fn get_dayMonth(&self) -> i32 {
        self.dayMonth
    }
    pub fn clear_dayMonth(&mut self) {
        self.dayMonth = 0;
    }

    // Param is passed by value, moved
    pub fn set_dayMonth(&mut self, v: i32) {
        self.dayMonth = v;
    }

    // int32 month = 4;


    pub fn get_month(&self) -> i32 {
        self.month
    }
    pub fn clear_month(&mut self) {
        self.month = 0;
    }

    // Param is passed by value, moved
    pub fn set_month(&mut self, v: i32) {
        self.month = v;
    }

    // int32 dayWeek = 5;


    pub fn get_dayWeek(&self) -> i32 {
        self.dayWeek
    }
    pub fn clear_dayWeek(&mut self) {
        self.dayWeek = 0;
    }

    // Param is passed by value, moved
    pub fn set_dayWeek(&mut self, v: i32) {
        self.dayWeek = v;
    }
}

impl ::protobuf::Message for CronItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.minute = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.hour = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dayMonth = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.month = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dayWeek = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.minute != 0 {
            my_size += ::protobuf::rt::value_size(1, self.minute, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hour != 0 {
            my_size += ::protobuf::rt::value_size(2, self.hour, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dayMonth != 0 {
            my_size += ::protobuf::rt::value_size(3, self.dayMonth, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.month != 0 {
            my_size += ::protobuf::rt::value_size(4, self.month, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dayWeek != 0 {
            my_size += ::protobuf::rt::value_size(5, self.dayWeek, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.minute != 0 {
            os.write_int32(1, self.minute)?;
        }
        if self.hour != 0 {
            os.write_int32(2, self.hour)?;
        }
        if self.dayMonth != 0 {
            os.write_int32(3, self.dayMonth)?;
        }
        if self.month != 0 {
            os.write_int32(4, self.month)?;
        }
        if self.dayWeek != 0 {
            os.write_int32(5, self.dayWeek)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CronItem {
        CronItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "minute",
                |m: &CronItem| { &m.minute },
                |m: &mut CronItem| { &mut m.minute },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "hour",
                |m: &CronItem| { &m.hour },
                |m: &mut CronItem| { &mut m.hour },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dayMonth",
                |m: &CronItem| { &m.dayMonth },
                |m: &mut CronItem| { &mut m.dayMonth },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "month",
                |m: &CronItem| { &m.month },
                |m: &mut CronItem| { &mut m.month },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dayWeek",
                |m: &CronItem| { &m.dayWeek },
                |m: &mut CronItem| { &mut m.dayWeek },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CronItem>(
                "CronItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CronItem {
        static instance: ::protobuf::rt::LazyV2<CronItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CronItem::new)
    }
}

impl ::protobuf::Clear for CronItem {
    fn clear(&mut self) {
        self.minute = 0;
        self.hour = 0;
        self.dayMonth = 0;
        self.month = 0;
        self.dayWeek = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CronItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CronItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AlarmConfig {
    // message fields
    pub begining: ::protobuf::SingularPtrField<CronItem>,
    pub end: ::protobuf::SingularPtrField<CronItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AlarmConfig {
    fn default() -> &'a AlarmConfig {
        <AlarmConfig as ::protobuf::Message>::default_instance()
    }
}

impl AlarmConfig {
    pub fn new() -> AlarmConfig {
        ::std::default::Default::default()
    }

    // .CronItem begining = 1;


    pub fn get_begining(&self) -> &CronItem {
        self.begining.as_ref().unwrap_or_else(|| <CronItem as ::protobuf::Message>::default_instance())
    }
    pub fn clear_begining(&mut self) {
        self.begining.clear();
    }

    pub fn has_begining(&self) -> bool {
        self.begining.is_some()
    }

    // Param is passed by value, moved
    pub fn set_begining(&mut self, v: CronItem) {
        self.begining = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_begining(&mut self) -> &mut CronItem {
        if self.begining.is_none() {
            self.begining.set_default();
        }
        self.begining.as_mut().unwrap()
    }

    // Take field
    pub fn take_begining(&mut self) -> CronItem {
        self.begining.take().unwrap_or_else(|| CronItem::new())
    }

    // .CronItem end = 2;


    pub fn get_end(&self) -> &CronItem {
        self.end.as_ref().unwrap_or_else(|| <CronItem as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end(&mut self) {
        self.end.clear();
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: CronItem) {
        self.end = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end(&mut self) -> &mut CronItem {
        if self.end.is_none() {
            self.end.set_default();
        }
        self.end.as_mut().unwrap()
    }

    // Take field
    pub fn take_end(&mut self) -> CronItem {
        self.end.take().unwrap_or_else(|| CronItem::new())
    }
}

impl ::protobuf::Message for AlarmConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.begining {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.begining)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.begining.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.begining.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AlarmConfig {
        AlarmConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CronItem>>(
                "begining",
                |m: &AlarmConfig| { &m.begining },
                |m: &mut AlarmConfig| { &mut m.begining },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CronItem>>(
                "end",
                |m: &AlarmConfig| { &m.end },
                |m: &mut AlarmConfig| { &mut m.end },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AlarmConfig>(
                "AlarmConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AlarmConfig {
        static instance: ::protobuf::rt::LazyV2<AlarmConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AlarmConfig::new)
    }
}

impl ::protobuf::Clear for AlarmConfig {
    fn clear(&mut self) {
        self.begining.clear();
        self.end.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AlarmConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlarmConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ManualConfig {
    // message fields
    pub state: bool,
    pub duration: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ManualConfig {
    fn default() -> &'a ManualConfig {
        <ManualConfig as ::protobuf::Message>::default_instance()
    }
}

impl ManualConfig {
    pub fn new() -> ManualConfig {
        ::std::default::Default::default()
    }

    // bool state = 1;


    pub fn get_state(&self) -> bool {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = false;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: bool) {
        self.state = v;
    }

    // int32 duration = 2;


    pub fn get_duration(&self) -> i32 {
        self.duration
    }
    pub fn clear_duration(&mut self) {
        self.duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: i32) {
        self.duration = v;
    }
}

impl ::protobuf::Message for ManualConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.state = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.duration = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != false {
            my_size += 2;
        }
        if self.duration != 0 {
            my_size += ::protobuf::rt::value_size(2, self.duration, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != false {
            os.write_bool(1, self.state)?;
        }
        if self.duration != 0 {
            os.write_int32(2, self.duration)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ManualConfig {
        ManualConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "state",
                |m: &ManualConfig| { &m.state },
                |m: &mut ManualConfig| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "duration",
                |m: &ManualConfig| { &m.duration },
                |m: &mut ManualConfig| { &mut m.duration },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ManualConfig>(
                "ManualConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ManualConfig {
        static instance: ::protobuf::rt::LazyV2<ManualConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ManualConfig::new)
    }
}

impl ::protobuf::Clear for ManualConfig {
    fn clear(&mut self) {
        self.state = false;
        self.duration = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ManualConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ManualConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelayOutletData {
    // message fields
    pub state: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelayOutletData {
    fn default() -> &'a RelayOutletData {
        <RelayOutletData as ::protobuf::Message>::default_instance()
    }
}

impl RelayOutletData {
    pub fn new() -> RelayOutletData {
        ::std::default::Default::default()
    }

    // bool state = 1;


    pub fn get_state(&self) -> bool {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = false;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: bool) {
        self.state = v;
    }
}

impl ::protobuf::Message for RelayOutletData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.state = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != false {
            os.write_bool(1, self.state)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelayOutletData {
        RelayOutletData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "state",
                |m: &RelayOutletData| { &m.state },
                |m: &mut RelayOutletData| { &mut m.state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelayOutletData>(
                "RelayOutletData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelayOutletData {
        static instance: ::protobuf::rt::LazyV2<RelayOutletData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelayOutletData::new)
    }
}

impl ::protobuf::Clear for RelayOutletData {
    fn clear(&mut self) {
        self.state = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelayOutletData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelayOutletData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelayOutletConfig {
    // message fields
    pub mode: RelayOutletMode,
    pub alarm: ::protobuf::SingularPtrField<AlarmConfig>,
    pub manual: ::protobuf::SingularPtrField<ManualConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelayOutletConfig {
    fn default() -> &'a RelayOutletConfig {
        <RelayOutletConfig as ::protobuf::Message>::default_instance()
    }
}

impl RelayOutletConfig {
    pub fn new() -> RelayOutletConfig {
        ::std::default::Default::default()
    }

    // .RelayOutletMode mode = 1;


    pub fn get_mode(&self) -> RelayOutletMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = RelayOutletMode::MANUAL;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: RelayOutletMode) {
        self.mode = v;
    }

    // .AlarmConfig alarm = 2;


    pub fn get_alarm(&self) -> &AlarmConfig {
        self.alarm.as_ref().unwrap_or_else(|| <AlarmConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_alarm(&mut self) {
        self.alarm.clear();
    }

    pub fn has_alarm(&self) -> bool {
        self.alarm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alarm(&mut self, v: AlarmConfig) {
        self.alarm = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alarm(&mut self) -> &mut AlarmConfig {
        if self.alarm.is_none() {
            self.alarm.set_default();
        }
        self.alarm.as_mut().unwrap()
    }

    // Take field
    pub fn take_alarm(&mut self) -> AlarmConfig {
        self.alarm.take().unwrap_or_else(|| AlarmConfig::new())
    }

    // .ManualConfig manual = 3;


    pub fn get_manual(&self) -> &ManualConfig {
        self.manual.as_ref().unwrap_or_else(|| <ManualConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_manual(&mut self) {
        self.manual.clear();
    }

    pub fn has_manual(&self) -> bool {
        self.manual.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manual(&mut self, v: ManualConfig) {
        self.manual = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manual(&mut self) -> &mut ManualConfig {
        if self.manual.is_none() {
            self.manual.set_default();
        }
        self.manual.as_mut().unwrap()
    }

    // Take field
    pub fn take_manual(&mut self) -> ManualConfig {
        self.manual.take().unwrap_or_else(|| ManualConfig::new())
    }
}

impl ::protobuf::Message for RelayOutletConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.alarm {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.manual {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alarm)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.manual)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.mode != RelayOutletMode::MANUAL {
            my_size += ::protobuf::rt::enum_size(1, self.mode);
        }
        if let Some(ref v) = self.alarm.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.manual.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.mode != RelayOutletMode::MANUAL {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        if let Some(ref v) = self.alarm.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.manual.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelayOutletConfig {
        RelayOutletConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RelayOutletMode>>(
                "mode",
                |m: &RelayOutletConfig| { &m.mode },
                |m: &mut RelayOutletConfig| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AlarmConfig>>(
                "alarm",
                |m: &RelayOutletConfig| { &m.alarm },
                |m: &mut RelayOutletConfig| { &mut m.alarm },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ManualConfig>>(
                "manual",
                |m: &RelayOutletConfig| { &m.manual },
                |m: &mut RelayOutletConfig| { &mut m.manual },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelayOutletConfig>(
                "RelayOutletConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelayOutletConfig {
        static instance: ::protobuf::rt::LazyV2<RelayOutletConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelayOutletConfig::new)
    }
}

impl ::protobuf::Clear for RelayOutletConfig {
    fn clear(&mut self) {
        self.mode = RelayOutletMode::MANUAL;
        self.alarm.clear();
        self.manual.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelayOutletConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelayOutletConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelayModuleData {
    // message fields
    pub p0: ::protobuf::SingularPtrField<RelayOutletData>,
    pub p1: ::protobuf::SingularPtrField<RelayOutletData>,
    pub p2: ::protobuf::SingularPtrField<RelayOutletData>,
    pub p3: ::protobuf::SingularPtrField<RelayOutletData>,
    pub p4: ::protobuf::SingularPtrField<RelayOutletData>,
    pub p5: ::protobuf::SingularPtrField<RelayOutletData>,
    pub p6: ::protobuf::SingularPtrField<RelayOutletData>,
    pub p7: ::protobuf::SingularPtrField<RelayOutletData>,
    pub timestamp: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelayModuleData {
    fn default() -> &'a RelayModuleData {
        <RelayModuleData as ::protobuf::Message>::default_instance()
    }
}

impl RelayModuleData {
    pub fn new() -> RelayModuleData {
        ::std::default::Default::default()
    }

    // .RelayOutletData p0 = 1;


    pub fn get_p0(&self) -> &RelayOutletData {
        self.p0.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p0(&mut self) {
        self.p0.clear();
    }

    pub fn has_p0(&self) -> bool {
        self.p0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p0(&mut self, v: RelayOutletData) {
        self.p0 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p0(&mut self) -> &mut RelayOutletData {
        if self.p0.is_none() {
            self.p0.set_default();
        }
        self.p0.as_mut().unwrap()
    }

    // Take field
    pub fn take_p0(&mut self) -> RelayOutletData {
        self.p0.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData p1 = 2;


    pub fn get_p1(&self) -> &RelayOutletData {
        self.p1.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p1(&mut self) {
        self.p1.clear();
    }

    pub fn has_p1(&self) -> bool {
        self.p1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p1(&mut self, v: RelayOutletData) {
        self.p1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p1(&mut self) -> &mut RelayOutletData {
        if self.p1.is_none() {
            self.p1.set_default();
        }
        self.p1.as_mut().unwrap()
    }

    // Take field
    pub fn take_p1(&mut self) -> RelayOutletData {
        self.p1.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData p2 = 3;


    pub fn get_p2(&self) -> &RelayOutletData {
        self.p2.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p2(&mut self) {
        self.p2.clear();
    }

    pub fn has_p2(&self) -> bool {
        self.p2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p2(&mut self, v: RelayOutletData) {
        self.p2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p2(&mut self) -> &mut RelayOutletData {
        if self.p2.is_none() {
            self.p2.set_default();
        }
        self.p2.as_mut().unwrap()
    }

    // Take field
    pub fn take_p2(&mut self) -> RelayOutletData {
        self.p2.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData p3 = 4;


    pub fn get_p3(&self) -> &RelayOutletData {
        self.p3.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p3(&mut self) {
        self.p3.clear();
    }

    pub fn has_p3(&self) -> bool {
        self.p3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p3(&mut self, v: RelayOutletData) {
        self.p3 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p3(&mut self) -> &mut RelayOutletData {
        if self.p3.is_none() {
            self.p3.set_default();
        }
        self.p3.as_mut().unwrap()
    }

    // Take field
    pub fn take_p3(&mut self) -> RelayOutletData {
        self.p3.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData p4 = 5;


    pub fn get_p4(&self) -> &RelayOutletData {
        self.p4.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p4(&mut self) {
        self.p4.clear();
    }

    pub fn has_p4(&self) -> bool {
        self.p4.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p4(&mut self, v: RelayOutletData) {
        self.p4 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p4(&mut self) -> &mut RelayOutletData {
        if self.p4.is_none() {
            self.p4.set_default();
        }
        self.p4.as_mut().unwrap()
    }

    // Take field
    pub fn take_p4(&mut self) -> RelayOutletData {
        self.p4.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData p5 = 6;


    pub fn get_p5(&self) -> &RelayOutletData {
        self.p5.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p5(&mut self) {
        self.p5.clear();
    }

    pub fn has_p5(&self) -> bool {
        self.p5.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p5(&mut self, v: RelayOutletData) {
        self.p5 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p5(&mut self) -> &mut RelayOutletData {
        if self.p5.is_none() {
            self.p5.set_default();
        }
        self.p5.as_mut().unwrap()
    }

    // Take field
    pub fn take_p5(&mut self) -> RelayOutletData {
        self.p5.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData p6 = 7;


    pub fn get_p6(&self) -> &RelayOutletData {
        self.p6.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p6(&mut self) {
        self.p6.clear();
    }

    pub fn has_p6(&self) -> bool {
        self.p6.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p6(&mut self, v: RelayOutletData) {
        self.p6 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p6(&mut self) -> &mut RelayOutletData {
        if self.p6.is_none() {
            self.p6.set_default();
        }
        self.p6.as_mut().unwrap()
    }

    // Take field
    pub fn take_p6(&mut self) -> RelayOutletData {
        self.p6.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData p7 = 8;


    pub fn get_p7(&self) -> &RelayOutletData {
        self.p7.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p7(&mut self) {
        self.p7.clear();
    }

    pub fn has_p7(&self) -> bool {
        self.p7.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p7(&mut self, v: RelayOutletData) {
        self.p7 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p7(&mut self) -> &mut RelayOutletData {
        if self.p7.is_none() {
            self.p7.set_default();
        }
        self.p7.as_mut().unwrap()
    }

    // Take field
    pub fn take_p7(&mut self) -> RelayOutletData {
        self.p7.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // int32 timestamp = 9;


    pub fn get_timestamp(&self) -> i32 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i32) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for RelayModuleData {
    fn is_initialized(&self) -> bool {
        for v in &self.p0 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p2 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p3 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p4 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p5 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p6 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p7 {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p0)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p1)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p2)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p3)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p4)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p5)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p6)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p7)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.p0.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p3.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p4.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p5.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p6.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p7.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(9, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.p0.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p1.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p2.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p3.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p4.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p5.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p6.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p7.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.timestamp != 0 {
            os.write_int32(9, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelayModuleData {
        RelayModuleData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p0",
                |m: &RelayModuleData| { &m.p0 },
                |m: &mut RelayModuleData| { &mut m.p0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p1",
                |m: &RelayModuleData| { &m.p1 },
                |m: &mut RelayModuleData| { &mut m.p1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p2",
                |m: &RelayModuleData| { &m.p2 },
                |m: &mut RelayModuleData| { &mut m.p2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p3",
                |m: &RelayModuleData| { &m.p3 },
                |m: &mut RelayModuleData| { &mut m.p3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p4",
                |m: &RelayModuleData| { &m.p4 },
                |m: &mut RelayModuleData| { &mut m.p4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p5",
                |m: &RelayModuleData| { &m.p5 },
                |m: &mut RelayModuleData| { &mut m.p5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p6",
                |m: &RelayModuleData| { &m.p6 },
                |m: &mut RelayModuleData| { &mut m.p6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p7",
                |m: &RelayModuleData| { &m.p7 },
                |m: &mut RelayModuleData| { &mut m.p7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "timestamp",
                |m: &RelayModuleData| { &m.timestamp },
                |m: &mut RelayModuleData| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelayModuleData>(
                "RelayModuleData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelayModuleData {
        static instance: ::protobuf::rt::LazyV2<RelayModuleData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelayModuleData::new)
    }
}

impl ::protobuf::Clear for RelayModuleData {
    fn clear(&mut self) {
        self.p0.clear();
        self.p1.clear();
        self.p2.clear();
        self.p3.clear();
        self.p4.clear();
        self.p5.clear();
        self.p6.clear();
        self.p7.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelayModuleData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelayModuleData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelayModuleConfig {
    // message fields
    pub p0: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub p1: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub p2: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub p3: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub p4: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub p5: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub p6: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub p7: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub timestamp: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelayModuleConfig {
    fn default() -> &'a RelayModuleConfig {
        <RelayModuleConfig as ::protobuf::Message>::default_instance()
    }
}

impl RelayModuleConfig {
    pub fn new() -> RelayModuleConfig {
        ::std::default::Default::default()
    }

    // .RelayOutletConfig p0 = 1;


    pub fn get_p0(&self) -> &RelayOutletConfig {
        self.p0.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p0(&mut self) {
        self.p0.clear();
    }

    pub fn has_p0(&self) -> bool {
        self.p0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p0(&mut self, v: RelayOutletConfig) {
        self.p0 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p0(&mut self) -> &mut RelayOutletConfig {
        if self.p0.is_none() {
            self.p0.set_default();
        }
        self.p0.as_mut().unwrap()
    }

    // Take field
    pub fn take_p0(&mut self) -> RelayOutletConfig {
        self.p0.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig p1 = 2;


    pub fn get_p1(&self) -> &RelayOutletConfig {
        self.p1.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p1(&mut self) {
        self.p1.clear();
    }

    pub fn has_p1(&self) -> bool {
        self.p1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p1(&mut self, v: RelayOutletConfig) {
        self.p1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p1(&mut self) -> &mut RelayOutletConfig {
        if self.p1.is_none() {
            self.p1.set_default();
        }
        self.p1.as_mut().unwrap()
    }

    // Take field
    pub fn take_p1(&mut self) -> RelayOutletConfig {
        self.p1.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig p2 = 3;


    pub fn get_p2(&self) -> &RelayOutletConfig {
        self.p2.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p2(&mut self) {
        self.p2.clear();
    }

    pub fn has_p2(&self) -> bool {
        self.p2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p2(&mut self, v: RelayOutletConfig) {
        self.p2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p2(&mut self) -> &mut RelayOutletConfig {
        if self.p2.is_none() {
            self.p2.set_default();
        }
        self.p2.as_mut().unwrap()
    }

    // Take field
    pub fn take_p2(&mut self) -> RelayOutletConfig {
        self.p2.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig p3 = 4;


    pub fn get_p3(&self) -> &RelayOutletConfig {
        self.p3.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p3(&mut self) {
        self.p3.clear();
    }

    pub fn has_p3(&self) -> bool {
        self.p3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p3(&mut self, v: RelayOutletConfig) {
        self.p3 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p3(&mut self) -> &mut RelayOutletConfig {
        if self.p3.is_none() {
            self.p3.set_default();
        }
        self.p3.as_mut().unwrap()
    }

    // Take field
    pub fn take_p3(&mut self) -> RelayOutletConfig {
        self.p3.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig p4 = 5;


    pub fn get_p4(&self) -> &RelayOutletConfig {
        self.p4.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p4(&mut self) {
        self.p4.clear();
    }

    pub fn has_p4(&self) -> bool {
        self.p4.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p4(&mut self, v: RelayOutletConfig) {
        self.p4 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p4(&mut self) -> &mut RelayOutletConfig {
        if self.p4.is_none() {
            self.p4.set_default();
        }
        self.p4.as_mut().unwrap()
    }

    // Take field
    pub fn take_p4(&mut self) -> RelayOutletConfig {
        self.p4.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig p5 = 6;


    pub fn get_p5(&self) -> &RelayOutletConfig {
        self.p5.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p5(&mut self) {
        self.p5.clear();
    }

    pub fn has_p5(&self) -> bool {
        self.p5.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p5(&mut self, v: RelayOutletConfig) {
        self.p5 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p5(&mut self) -> &mut RelayOutletConfig {
        if self.p5.is_none() {
            self.p5.set_default();
        }
        self.p5.as_mut().unwrap()
    }

    // Take field
    pub fn take_p5(&mut self) -> RelayOutletConfig {
        self.p5.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig p6 = 7;


    pub fn get_p6(&self) -> &RelayOutletConfig {
        self.p6.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p6(&mut self) {
        self.p6.clear();
    }

    pub fn has_p6(&self) -> bool {
        self.p6.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p6(&mut self, v: RelayOutletConfig) {
        self.p6 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p6(&mut self) -> &mut RelayOutletConfig {
        if self.p6.is_none() {
            self.p6.set_default();
        }
        self.p6.as_mut().unwrap()
    }

    // Take field
    pub fn take_p6(&mut self) -> RelayOutletConfig {
        self.p6.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig p7 = 8;


    pub fn get_p7(&self) -> &RelayOutletConfig {
        self.p7.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p7(&mut self) {
        self.p7.clear();
    }

    pub fn has_p7(&self) -> bool {
        self.p7.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p7(&mut self, v: RelayOutletConfig) {
        self.p7 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p7(&mut self) -> &mut RelayOutletConfig {
        if self.p7.is_none() {
            self.p7.set_default();
        }
        self.p7.as_mut().unwrap()
    }

    // Take field
    pub fn take_p7(&mut self) -> RelayOutletConfig {
        self.p7.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // int32 timestamp = 9;


    pub fn get_timestamp(&self) -> i32 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i32) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for RelayModuleConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.p0 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p2 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p3 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p4 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p5 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p6 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p7 {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p0)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p1)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p2)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p3)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p4)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p5)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p6)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p7)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.p0.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p3.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p4.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p5.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p6.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p7.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(9, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.p0.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p1.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p2.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p3.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p4.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p5.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p6.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p7.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.timestamp != 0 {
            os.write_int32(9, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelayModuleConfig {
        RelayModuleConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p0",
                |m: &RelayModuleConfig| { &m.p0 },
                |m: &mut RelayModuleConfig| { &mut m.p0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p1",
                |m: &RelayModuleConfig| { &m.p1 },
                |m: &mut RelayModuleConfig| { &mut m.p1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p2",
                |m: &RelayModuleConfig| { &m.p2 },
                |m: &mut RelayModuleConfig| { &mut m.p2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p3",
                |m: &RelayModuleConfig| { &m.p3 },
                |m: &mut RelayModuleConfig| { &mut m.p3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p4",
                |m: &RelayModuleConfig| { &m.p4 },
                |m: &mut RelayModuleConfig| { &mut m.p4 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p5",
                |m: &RelayModuleConfig| { &m.p5 },
                |m: &mut RelayModuleConfig| { &mut m.p5 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p6",
                |m: &RelayModuleConfig| { &m.p6 },
                |m: &mut RelayModuleConfig| { &mut m.p6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p7",
                |m: &RelayModuleConfig| { &m.p7 },
                |m: &mut RelayModuleConfig| { &mut m.p7 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "timestamp",
                |m: &RelayModuleConfig| { &m.timestamp },
                |m: &mut RelayModuleConfig| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelayModuleConfig>(
                "RelayModuleConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelayModuleConfig {
        static instance: ::protobuf::rt::LazyV2<RelayModuleConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelayModuleConfig::new)
    }
}

impl ::protobuf::Clear for RelayModuleConfig {
    fn clear(&mut self) {
        self.p0.clear();
        self.p1.clear();
        self.p2.clear();
        self.p3.clear();
        self.p4.clear();
        self.p5.clear();
        self.p6.clear();
        self.p7.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelayModuleConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelayModuleConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WCModuleData {
    // message fields
    pub p0: ::protobuf::SingularPtrField<RelayOutletData>,
    pub p1: ::protobuf::SingularPtrField<RelayOutletData>,
    pub p2: ::protobuf::SingularPtrField<RelayOutletData>,
    pub drain: ::protobuf::SingularPtrField<RelayOutletData>,
    pub pump0: ::protobuf::SingularPtrField<RelayOutletData>,
    pub pump1: ::protobuf::SingularPtrField<RelayOutletData>,
    pub pump2: ::protobuf::SingularPtrField<RelayOutletData>,
    pub pump3: ::protobuf::SingularPtrField<RelayOutletData>,
    pub timestamp: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WCModuleData {
    fn default() -> &'a WCModuleData {
        <WCModuleData as ::protobuf::Message>::default_instance()
    }
}

impl WCModuleData {
    pub fn new() -> WCModuleData {
        ::std::default::Default::default()
    }

    // .RelayOutletData p0 = 1;


    pub fn get_p0(&self) -> &RelayOutletData {
        self.p0.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p0(&mut self) {
        self.p0.clear();
    }

    pub fn has_p0(&self) -> bool {
        self.p0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p0(&mut self, v: RelayOutletData) {
        self.p0 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p0(&mut self) -> &mut RelayOutletData {
        if self.p0.is_none() {
            self.p0.set_default();
        }
        self.p0.as_mut().unwrap()
    }

    // Take field
    pub fn take_p0(&mut self) -> RelayOutletData {
        self.p0.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData p1 = 2;


    pub fn get_p1(&self) -> &RelayOutletData {
        self.p1.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p1(&mut self) {
        self.p1.clear();
    }

    pub fn has_p1(&self) -> bool {
        self.p1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p1(&mut self, v: RelayOutletData) {
        self.p1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p1(&mut self) -> &mut RelayOutletData {
        if self.p1.is_none() {
            self.p1.set_default();
        }
        self.p1.as_mut().unwrap()
    }

    // Take field
    pub fn take_p1(&mut self) -> RelayOutletData {
        self.p1.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData p2 = 3;


    pub fn get_p2(&self) -> &RelayOutletData {
        self.p2.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p2(&mut self) {
        self.p2.clear();
    }

    pub fn has_p2(&self) -> bool {
        self.p2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p2(&mut self, v: RelayOutletData) {
        self.p2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p2(&mut self) -> &mut RelayOutletData {
        if self.p2.is_none() {
            self.p2.set_default();
        }
        self.p2.as_mut().unwrap()
    }

    // Take field
    pub fn take_p2(&mut self) -> RelayOutletData {
        self.p2.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData drain = 4;


    pub fn get_drain(&self) -> &RelayOutletData {
        self.drain.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_drain(&mut self) {
        self.drain.clear();
    }

    pub fn has_drain(&self) -> bool {
        self.drain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_drain(&mut self, v: RelayOutletData) {
        self.drain = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_drain(&mut self) -> &mut RelayOutletData {
        if self.drain.is_none() {
            self.drain.set_default();
        }
        self.drain.as_mut().unwrap()
    }

    // Take field
    pub fn take_drain(&mut self) -> RelayOutletData {
        self.drain.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData pump0 = 5;


    pub fn get_pump0(&self) -> &RelayOutletData {
        self.pump0.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pump0(&mut self) {
        self.pump0.clear();
    }

    pub fn has_pump0(&self) -> bool {
        self.pump0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pump0(&mut self, v: RelayOutletData) {
        self.pump0 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pump0(&mut self) -> &mut RelayOutletData {
        if self.pump0.is_none() {
            self.pump0.set_default();
        }
        self.pump0.as_mut().unwrap()
    }

    // Take field
    pub fn take_pump0(&mut self) -> RelayOutletData {
        self.pump0.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData pump1 = 6;


    pub fn get_pump1(&self) -> &RelayOutletData {
        self.pump1.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pump1(&mut self) {
        self.pump1.clear();
    }

    pub fn has_pump1(&self) -> bool {
        self.pump1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pump1(&mut self, v: RelayOutletData) {
        self.pump1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pump1(&mut self) -> &mut RelayOutletData {
        if self.pump1.is_none() {
            self.pump1.set_default();
        }
        self.pump1.as_mut().unwrap()
    }

    // Take field
    pub fn take_pump1(&mut self) -> RelayOutletData {
        self.pump1.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData pump2 = 7;


    pub fn get_pump2(&self) -> &RelayOutletData {
        self.pump2.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pump2(&mut self) {
        self.pump2.clear();
    }

    pub fn has_pump2(&self) -> bool {
        self.pump2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pump2(&mut self, v: RelayOutletData) {
        self.pump2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pump2(&mut self) -> &mut RelayOutletData {
        if self.pump2.is_none() {
            self.pump2.set_default();
        }
        self.pump2.as_mut().unwrap()
    }

    // Take field
    pub fn take_pump2(&mut self) -> RelayOutletData {
        self.pump2.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // .RelayOutletData pump3 = 8;


    pub fn get_pump3(&self) -> &RelayOutletData {
        self.pump3.as_ref().unwrap_or_else(|| <RelayOutletData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pump3(&mut self) {
        self.pump3.clear();
    }

    pub fn has_pump3(&self) -> bool {
        self.pump3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pump3(&mut self, v: RelayOutletData) {
        self.pump3 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pump3(&mut self) -> &mut RelayOutletData {
        if self.pump3.is_none() {
            self.pump3.set_default();
        }
        self.pump3.as_mut().unwrap()
    }

    // Take field
    pub fn take_pump3(&mut self) -> RelayOutletData {
        self.pump3.take().unwrap_or_else(|| RelayOutletData::new())
    }

    // int32 timestamp = 9;


    pub fn get_timestamp(&self) -> i32 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i32) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for WCModuleData {
    fn is_initialized(&self) -> bool {
        for v in &self.p0 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p2 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.drain {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pump0 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pump1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pump2 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pump3 {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p0)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p1)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p2)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.drain)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pump0)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pump1)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pump2)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pump3)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.p0.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.drain.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pump0.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pump1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pump2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pump3.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(9, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.p0.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p1.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p2.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.drain.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pump0.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pump1.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pump2.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pump3.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.timestamp != 0 {
            os.write_int32(9, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WCModuleData {
        WCModuleData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p0",
                |m: &WCModuleData| { &m.p0 },
                |m: &mut WCModuleData| { &mut m.p0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p1",
                |m: &WCModuleData| { &m.p1 },
                |m: &mut WCModuleData| { &mut m.p1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "p2",
                |m: &WCModuleData| { &m.p2 },
                |m: &mut WCModuleData| { &mut m.p2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "drain",
                |m: &WCModuleData| { &m.drain },
                |m: &mut WCModuleData| { &mut m.drain },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "pump0",
                |m: &WCModuleData| { &m.pump0 },
                |m: &mut WCModuleData| { &mut m.pump0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "pump1",
                |m: &WCModuleData| { &m.pump1 },
                |m: &mut WCModuleData| { &mut m.pump1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "pump2",
                |m: &WCModuleData| { &m.pump2 },
                |m: &mut WCModuleData| { &mut m.pump2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletData>>(
                "pump3",
                |m: &WCModuleData| { &m.pump3 },
                |m: &mut WCModuleData| { &mut m.pump3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "timestamp",
                |m: &WCModuleData| { &m.timestamp },
                |m: &mut WCModuleData| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WCModuleData>(
                "WCModuleData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WCModuleData {
        static instance: ::protobuf::rt::LazyV2<WCModuleData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WCModuleData::new)
    }
}

impl ::protobuf::Clear for WCModuleData {
    fn clear(&mut self) {
        self.p0.clear();
        self.p1.clear();
        self.p2.clear();
        self.drain.clear();
        self.pump0.clear();
        self.pump1.clear();
        self.pump2.clear();
        self.pump3.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WCModuleData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WCModuleData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WCModuleConfig {
    // message fields
    pub p0: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub p1: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub p2: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub drain: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub pump0: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub pump1: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub pump2: ::protobuf::SingularPtrField<RelayOutletConfig>,
    pub pump3: ::protobuf::SingularPtrField<RelayOutletConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WCModuleConfig {
    fn default() -> &'a WCModuleConfig {
        <WCModuleConfig as ::protobuf::Message>::default_instance()
    }
}

impl WCModuleConfig {
    pub fn new() -> WCModuleConfig {
        ::std::default::Default::default()
    }

    // .RelayOutletConfig p0 = 1;


    pub fn get_p0(&self) -> &RelayOutletConfig {
        self.p0.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p0(&mut self) {
        self.p0.clear();
    }

    pub fn has_p0(&self) -> bool {
        self.p0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p0(&mut self, v: RelayOutletConfig) {
        self.p0 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p0(&mut self) -> &mut RelayOutletConfig {
        if self.p0.is_none() {
            self.p0.set_default();
        }
        self.p0.as_mut().unwrap()
    }

    // Take field
    pub fn take_p0(&mut self) -> RelayOutletConfig {
        self.p0.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig p1 = 2;


    pub fn get_p1(&self) -> &RelayOutletConfig {
        self.p1.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p1(&mut self) {
        self.p1.clear();
    }

    pub fn has_p1(&self) -> bool {
        self.p1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p1(&mut self, v: RelayOutletConfig) {
        self.p1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p1(&mut self) -> &mut RelayOutletConfig {
        if self.p1.is_none() {
            self.p1.set_default();
        }
        self.p1.as_mut().unwrap()
    }

    // Take field
    pub fn take_p1(&mut self) -> RelayOutletConfig {
        self.p1.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig p2 = 3;


    pub fn get_p2(&self) -> &RelayOutletConfig {
        self.p2.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p2(&mut self) {
        self.p2.clear();
    }

    pub fn has_p2(&self) -> bool {
        self.p2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p2(&mut self, v: RelayOutletConfig) {
        self.p2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p2(&mut self) -> &mut RelayOutletConfig {
        if self.p2.is_none() {
            self.p2.set_default();
        }
        self.p2.as_mut().unwrap()
    }

    // Take field
    pub fn take_p2(&mut self) -> RelayOutletConfig {
        self.p2.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig drain = 4;


    pub fn get_drain(&self) -> &RelayOutletConfig {
        self.drain.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_drain(&mut self) {
        self.drain.clear();
    }

    pub fn has_drain(&self) -> bool {
        self.drain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_drain(&mut self, v: RelayOutletConfig) {
        self.drain = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_drain(&mut self) -> &mut RelayOutletConfig {
        if self.drain.is_none() {
            self.drain.set_default();
        }
        self.drain.as_mut().unwrap()
    }

    // Take field
    pub fn take_drain(&mut self) -> RelayOutletConfig {
        self.drain.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig pump0 = 5;


    pub fn get_pump0(&self) -> &RelayOutletConfig {
        self.pump0.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pump0(&mut self) {
        self.pump0.clear();
    }

    pub fn has_pump0(&self) -> bool {
        self.pump0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pump0(&mut self, v: RelayOutletConfig) {
        self.pump0 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pump0(&mut self) -> &mut RelayOutletConfig {
        if self.pump0.is_none() {
            self.pump0.set_default();
        }
        self.pump0.as_mut().unwrap()
    }

    // Take field
    pub fn take_pump0(&mut self) -> RelayOutletConfig {
        self.pump0.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig pump1 = 6;


    pub fn get_pump1(&self) -> &RelayOutletConfig {
        self.pump1.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pump1(&mut self) {
        self.pump1.clear();
    }

    pub fn has_pump1(&self) -> bool {
        self.pump1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pump1(&mut self, v: RelayOutletConfig) {
        self.pump1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pump1(&mut self) -> &mut RelayOutletConfig {
        if self.pump1.is_none() {
            self.pump1.set_default();
        }
        self.pump1.as_mut().unwrap()
    }

    // Take field
    pub fn take_pump1(&mut self) -> RelayOutletConfig {
        self.pump1.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig pump2 = 7;


    pub fn get_pump2(&self) -> &RelayOutletConfig {
        self.pump2.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pump2(&mut self) {
        self.pump2.clear();
    }

    pub fn has_pump2(&self) -> bool {
        self.pump2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pump2(&mut self, v: RelayOutletConfig) {
        self.pump2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pump2(&mut self) -> &mut RelayOutletConfig {
        if self.pump2.is_none() {
            self.pump2.set_default();
        }
        self.pump2.as_mut().unwrap()
    }

    // Take field
    pub fn take_pump2(&mut self) -> RelayOutletConfig {
        self.pump2.take().unwrap_or_else(|| RelayOutletConfig::new())
    }

    // .RelayOutletConfig pump3 = 8;


    pub fn get_pump3(&self) -> &RelayOutletConfig {
        self.pump3.as_ref().unwrap_or_else(|| <RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pump3(&mut self) {
        self.pump3.clear();
    }

    pub fn has_pump3(&self) -> bool {
        self.pump3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pump3(&mut self, v: RelayOutletConfig) {
        self.pump3 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pump3(&mut self) -> &mut RelayOutletConfig {
        if self.pump3.is_none() {
            self.pump3.set_default();
        }
        self.pump3.as_mut().unwrap()
    }

    // Take field
    pub fn take_pump3(&mut self) -> RelayOutletConfig {
        self.pump3.take().unwrap_or_else(|| RelayOutletConfig::new())
    }
}

impl ::protobuf::Message for WCModuleConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.p0 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p2 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.drain {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pump0 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pump1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pump2 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pump3 {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p0)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p1)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p2)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.drain)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pump0)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pump1)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pump2)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pump3)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.p0.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.drain.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pump0.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pump1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pump2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pump3.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.p0.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p1.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p2.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.drain.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pump0.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pump1.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pump2.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pump3.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WCModuleConfig {
        WCModuleConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p0",
                |m: &WCModuleConfig| { &m.p0 },
                |m: &mut WCModuleConfig| { &mut m.p0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p1",
                |m: &WCModuleConfig| { &m.p1 },
                |m: &mut WCModuleConfig| { &mut m.p1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "p2",
                |m: &WCModuleConfig| { &m.p2 },
                |m: &mut WCModuleConfig| { &mut m.p2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "drain",
                |m: &WCModuleConfig| { &m.drain },
                |m: &mut WCModuleConfig| { &mut m.drain },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "pump0",
                |m: &WCModuleConfig| { &m.pump0 },
                |m: &mut WCModuleConfig| { &mut m.pump0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "pump1",
                |m: &WCModuleConfig| { &m.pump1 },
                |m: &mut WCModuleConfig| { &mut m.pump1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "pump2",
                |m: &WCModuleConfig| { &m.pump2 },
                |m: &mut WCModuleConfig| { &mut m.pump2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelayOutletConfig>>(
                "pump3",
                |m: &WCModuleConfig| { &m.pump3 },
                |m: &mut WCModuleConfig| { &mut m.pump3 },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WCModuleConfig>(
                "WCModuleConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WCModuleConfig {
        static instance: ::protobuf::rt::LazyV2<WCModuleConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WCModuleConfig::new)
    }
}

impl ::protobuf::Clear for WCModuleConfig {
    fn clear(&mut self) {
        self.p0.clear();
        self.p1.clear();
        self.p2.clear();
        self.drain.clear();
        self.pump0.clear();
        self.pump1.clear();
        self.pump2.clear();
        self.pump3.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WCModuleConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WCModuleConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RelayOutletMode {
    MANUAL = 0,
    ALARM = 1,
}

impl ::protobuf::ProtobufEnum for RelayOutletMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RelayOutletMode> {
        match value {
            0 => ::std::option::Option::Some(RelayOutletMode::MANUAL),
            1 => ::std::option::Option::Some(RelayOutletMode::ALARM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RelayOutletMode] = &[
            RelayOutletMode::MANUAL,
            RelayOutletMode::ALARM,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RelayOutletMode>("RelayOutletMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RelayOutletMode {
}

impl ::std::default::Default for RelayOutletMode {
    fn default() -> Self {
        RelayOutletMode::MANUAL
    }
}

impl ::protobuf::reflect::ProtobufValue for RelayOutletMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cmodule.proto\"\xa0\x01\n\nModuleData\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x1c\n\t\
    readCount\x18\x04\x20\x01(\x05R\treadCount\x12\"\n\x0cboardVersion\x18\
    \x05\x20\x01(\tR\x0cboardVersion\x12\x12\n\x04plug\x18\x06\x20\x01(\x08R\
    \x04plug\x12\x18\n\x07atIndex\x18\x07\x20\x01(\x05R\x07atIndex\"q\n\rTHL\
    ModuleData\x12\x1a\n\x08humidity\x18\x02\x20\x01(\x02R\x08humidity\x12&\
    \n\x0eairTemperature\x18\x03\x20\x01(\x02R\x0eairTemperature\x12\x1c\n\t\
    timestamp\x18\t\x20\x01(\x05R\ttimestamp\"\xae\x01\n\x0eSOILModuleData\
    \x12\x0e\n\x02p0\x18\x01\x20\x01(\x05R\x02p0\x12\x0e\n\x02p1\x18\x02\x20\
    \x01(\x05R\x02p1\x12\x0e\n\x02p2\x18\x03\x20\x01(\x05R\x02p2\x12\x0e\n\
    \x02p3\x18\x04\x20\x01(\x05R\x02p3\x12\x0e\n\x02p4\x18\x05\x20\x01(\x05R\
    \x02p4\x12\x0e\n\x02p5\x18\x06\x20\x01(\x05R\x02p5\x12\x0e\n\x02p6\x18\
    \x07\x20\x01(\x05R\x02p6\x12\x0e\n\x02p7\x18\x08\x20\x01(\x05R\x02p7\x12\
    \x1c\n\ttimestamp\x18\t\x20\x01(\x05R\ttimestamp\"n\n\x0cWAModuleData\
    \x12\x0e\n\x02PH\x18\x02\x20\x01(\x05R\x02PH\x12\x0e\n\x02EC\x18\x03\x20\
    \x01(\x05R\x02EC\x12\x20\n\x0btemperature\x18\x04\x20\x01(\x05R\x0btempe\
    rature\x12\x1c\n\ttimestamp\x18\t\x20\x01(\x05R\ttimestamp\"\x82\x01\n\
    \x08CronItem\x12\x16\n\x06minute\x18\x01\x20\x01(\x05R\x06minute\x12\x12\
    \n\x04hour\x18\x02\x20\x01(\x05R\x04hour\x12\x1a\n\x08dayMonth\x18\x03\
    \x20\x01(\x05R\x08dayMonth\x12\x14\n\x05month\x18\x04\x20\x01(\x05R\x05m\
    onth\x12\x18\n\x07dayWeek\x18\x05\x20\x01(\x05R\x07dayWeek\"Q\n\x0bAlarm\
    Config\x12%\n\x08begining\x18\x01\x20\x01(\x0b2\t.CronItemR\x08begining\
    \x12\x1b\n\x03end\x18\x02\x20\x01(\x0b2\t.CronItemR\x03end\"@\n\x0cManua\
    lConfig\x12\x14\n\x05state\x18\x01\x20\x01(\x08R\x05state\x12\x1a\n\x08d\
    uration\x18\x02\x20\x01(\x05R\x08duration\"'\n\x0fRelayOutletData\x12\
    \x14\n\x05state\x18\x01\x20\x01(\x08R\x05state\"\x84\x01\n\x11RelayOutle\
    tConfig\x12$\n\x04mode\x18\x01\x20\x01(\x0e2\x10.RelayOutletModeR\x04mod\
    e\x12\"\n\x05alarm\x18\x02\x20\x01(\x0b2\x0c.AlarmConfigR\x05alarm\x12%\
    \n\x06manual\x18\x03\x20\x01(\x0b2\r.ManualConfigR\x06manual\"\xbf\x02\n\
    \x0fRelayModuleData\x12\x20\n\x02p0\x18\x01\x20\x01(\x0b2\x10.RelayOutle\
    tDataR\x02p0\x12\x20\n\x02p1\x18\x02\x20\x01(\x0b2\x10.RelayOutletDataR\
    \x02p1\x12\x20\n\x02p2\x18\x03\x20\x01(\x0b2\x10.RelayOutletDataR\x02p2\
    \x12\x20\n\x02p3\x18\x04\x20\x01(\x0b2\x10.RelayOutletDataR\x02p3\x12\
    \x20\n\x02p4\x18\x05\x20\x01(\x0b2\x10.RelayOutletDataR\x02p4\x12\x20\n\
    \x02p5\x18\x06\x20\x01(\x0b2\x10.RelayOutletDataR\x02p5\x12\x20\n\x02p6\
    \x18\x07\x20\x01(\x0b2\x10.RelayOutletDataR\x02p6\x12\x20\n\x02p7\x18\
    \x08\x20\x01(\x0b2\x10.RelayOutletDataR\x02p7\x12\x1c\n\ttimestamp\x18\t\
    \x20\x01(\x05R\ttimestamp\"\xd1\x02\n\x11RelayModuleConfig\x12\"\n\x02p0\
    \x18\x01\x20\x01(\x0b2\x12.RelayOutletConfigR\x02p0\x12\"\n\x02p1\x18\
    \x02\x20\x01(\x0b2\x12.RelayOutletConfigR\x02p1\x12\"\n\x02p2\x18\x03\
    \x20\x01(\x0b2\x12.RelayOutletConfigR\x02p2\x12\"\n\x02p3\x18\x04\x20\
    \x01(\x0b2\x12.RelayOutletConfigR\x02p3\x12\"\n\x02p4\x18\x05\x20\x01(\
    \x0b2\x12.RelayOutletConfigR\x02p4\x12\"\n\x02p5\x18\x06\x20\x01(\x0b2\
    \x12.RelayOutletConfigR\x02p5\x12\"\n\x02p6\x18\x07\x20\x01(\x0b2\x12.Re\
    layOutletConfigR\x02p6\x12\"\n\x02p7\x18\x08\x20\x01(\x0b2\x12.RelayOutl\
    etConfigR\x02p7\x12\x1c\n\ttimestamp\x18\t\x20\x01(\x05R\ttimestamp\"\
    \xda\x02\n\x0cWCModuleData\x12\x20\n\x02p0\x18\x01\x20\x01(\x0b2\x10.Rel\
    ayOutletDataR\x02p0\x12\x20\n\x02p1\x18\x02\x20\x01(\x0b2\x10.RelayOutle\
    tDataR\x02p1\x12\x20\n\x02p2\x18\x03\x20\x01(\x0b2\x10.RelayOutletDataR\
    \x02p2\x12&\n\x05drain\x18\x04\x20\x01(\x0b2\x10.RelayOutletDataR\x05dra\
    in\x12&\n\x05pump0\x18\x05\x20\x01(\x0b2\x10.RelayOutletDataR\x05pump0\
    \x12&\n\x05pump1\x18\x06\x20\x01(\x0b2\x10.RelayOutletDataR\x05pump1\x12\
    &\n\x05pump2\x18\x07\x20\x01(\x0b2\x10.RelayOutletDataR\x05pump2\x12&\n\
    \x05pump3\x18\x08\x20\x01(\x0b2\x10.RelayOutletDataR\x05pump3\x12\x1c\n\
    \ttimestamp\x18\t\x20\x01(\x05R\ttimestamp\"\xce\x02\n\x0eWCModuleConfig\
    \x12\"\n\x02p0\x18\x01\x20\x01(\x0b2\x12.RelayOutletConfigR\x02p0\x12\"\
    \n\x02p1\x18\x02\x20\x01(\x0b2\x12.RelayOutletConfigR\x02p1\x12\"\n\x02p\
    2\x18\x03\x20\x01(\x0b2\x12.RelayOutletConfigR\x02p2\x12(\n\x05drain\x18\
    \x04\x20\x01(\x0b2\x12.RelayOutletConfigR\x05drain\x12(\n\x05pump0\x18\
    \x05\x20\x01(\x0b2\x12.RelayOutletConfigR\x05pump0\x12(\n\x05pump1\x18\
    \x06\x20\x01(\x0b2\x12.RelayOutletConfigR\x05pump1\x12(\n\x05pump2\x18\
    \x07\x20\x01(\x0b2\x12.RelayOutletConfigR\x05pump2\x12(\n\x05pump3\x18\
    \x08\x20\x01(\x0b2\x12.RelayOutletConfigR\x05pump3*(\n\x0fRelayOutletMod\
    e\x12\n\n\x06MANUAL\x10\0\x12\t\n\x05ALARM\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
