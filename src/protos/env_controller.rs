// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `env_controller.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MActor {
    // message fields
    pub name: ::std::string::String,
    pub id: ::std::string::String,
    pub property: ::std::string::String,
    pub field_type: RessourceType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MActor {
    fn default() -> &'a MActor {
        <MActor as ::protobuf::Message>::default_instance()
    }
}

impl MActor {
    pub fn new() -> MActor {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string id = 2;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string property = 3;


    pub fn get_property(&self) -> &str {
        &self.property
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: ::std::string::String) {
        self.property = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut ::std::string::String {
        &mut self.property
    }

    // Take field
    pub fn take_property(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.property, ::std::string::String::new())
    }

    // .RessourceType type = 5;


    pub fn get_field_type(&self) -> RessourceType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = RessourceType::ACTOR_MODULE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: RessourceType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for MActor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.property)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if !self.property.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.property);
        }
        if self.field_type != RessourceType::ACTOR_MODULE {
            my_size += ::protobuf::rt::enum_size(5, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if !self.property.is_empty() {
            os.write_string(3, &self.property)?;
        }
        if self.field_type != RessourceType::ACTOR_MODULE {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MActor {
        MActor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &MActor| { &m.name },
                |m: &mut MActor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &MActor| { &m.id },
                |m: &mut MActor| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "property",
                |m: &MActor| { &m.property },
                |m: &mut MActor| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RessourceType>>(
                "type",
                |m: &MActor| { &m.field_type },
                |m: &mut MActor| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MActor>(
                "MActor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MActor {
        static instance: ::protobuf::rt::LazyV2<MActor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MActor::new)
    }
}

impl ::protobuf::Clear for MActor {
    fn clear(&mut self) {
        self.name.clear();
        self.id.clear();
        self.property.clear();
        self.field_type = RessourceType::ACTOR_MODULE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MActor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MActor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MObserver {
    // message fields
    pub name: ::std::string::String,
    pub id: ::std::string::String,
    pub property: ::std::string::String,
    pub field_type: RessourceType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MObserver {
    fn default() -> &'a MObserver {
        <MObserver as ::protobuf::Message>::default_instance()
    }
}

impl MObserver {
    pub fn new() -> MObserver {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string id = 2;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string property = 3;


    pub fn get_property(&self) -> &str {
        &self.property
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: ::std::string::String) {
        self.property = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut ::std::string::String {
        &mut self.property
    }

    // Take field
    pub fn take_property(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.property, ::std::string::String::new())
    }

    // .RessourceType type = 4;


    pub fn get_field_type(&self) -> RessourceType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = RessourceType::ACTOR_MODULE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: RessourceType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for MObserver {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.property)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if !self.property.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.property);
        }
        if self.field_type != RessourceType::ACTOR_MODULE {
            my_size += ::protobuf::rt::enum_size(4, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if !self.property.is_empty() {
            os.write_string(3, &self.property)?;
        }
        if self.field_type != RessourceType::ACTOR_MODULE {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MObserver {
        MObserver::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &MObserver| { &m.name },
                |m: &mut MObserver| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &MObserver| { &m.id },
                |m: &mut MObserver| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "property",
                |m: &MObserver| { &m.property },
                |m: &mut MObserver| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RessourceType>>(
                "type",
                |m: &MObserver| { &m.field_type },
                |m: &mut MObserver| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MObserver>(
                "MObserver",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MObserver {
        static instance: ::protobuf::rt::LazyV2<MObserver> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MObserver::new)
    }
}

impl ::protobuf::Clear for MObserver {
    fn clear(&mut self) {
        self.name.clear();
        self.id.clear();
        self.property.clear();
        self.field_type = RessourceType::ACTOR_MODULE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MObserver {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MObserver {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SCConditionActor {
    // message fields
    pub actor_id: ::std::string::String,
    pub observer_id: ::std::string::String,
    pub actions: ::std::collections::HashMap<i32, SCObserverAction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SCConditionActor {
    fn default() -> &'a SCConditionActor {
        <SCConditionActor as ::protobuf::Message>::default_instance()
    }
}

impl SCConditionActor {
    pub fn new() -> SCConditionActor {
        ::std::default::Default::default()
    }

    // string actor_id = 1;


    pub fn get_actor_id(&self) -> &str {
        &self.actor_id
    }
    pub fn clear_actor_id(&mut self) {
        self.actor_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_actor_id(&mut self, v: ::std::string::String) {
        self.actor_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actor_id(&mut self) -> &mut ::std::string::String {
        &mut self.actor_id
    }

    // Take field
    pub fn take_actor_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actor_id, ::std::string::String::new())
    }

    // string observer_id = 2;


    pub fn get_observer_id(&self) -> &str {
        &self.observer_id
    }
    pub fn clear_observer_id(&mut self) {
        self.observer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_observer_id(&mut self, v: ::std::string::String) {
        self.observer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_observer_id(&mut self) -> &mut ::std::string::String {
        &mut self.observer_id
    }

    // Take field
    pub fn take_observer_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.observer_id, ::std::string::String::new())
    }

    // repeated .SCConditionActor.ActionsEntry actions = 3;


    pub fn get_actions(&self) -> &::std::collections::HashMap<i32, SCObserverAction> {
        &self.actions
    }
    pub fn clear_actions(&mut self) {
        self.actions.clear();
    }

    // Param is passed by value, moved
    pub fn set_actions(&mut self, v: ::std::collections::HashMap<i32, SCObserverAction>) {
        self.actions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_actions(&mut self) -> &mut ::std::collections::HashMap<i32, SCObserverAction> {
        &mut self.actions
    }

    // Take field
    pub fn take_actions(&mut self) -> ::std::collections::HashMap<i32, SCObserverAction> {
        ::std::mem::replace(&mut self.actions, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for SCConditionActor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actor_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.observer_id)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<SCObserverAction>>(wire_type, is, &mut self.actions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.actor_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.actor_id);
        }
        if !self.observer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.observer_id);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<SCObserverAction>>(3, &self.actions);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.actor_id.is_empty() {
            os.write_string(1, &self.actor_id)?;
        }
        if !self.observer_id.is_empty() {
            os.write_string(2, &self.observer_id)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<SCObserverAction>>(3, &self.actions, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SCConditionActor {
        SCConditionActor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actor_id",
                |m: &SCConditionActor| { &m.actor_id },
                |m: &mut SCConditionActor| { &mut m.actor_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "observer_id",
                |m: &SCConditionActor| { &m.observer_id },
                |m: &mut SCConditionActor| { &mut m.observer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<SCObserverAction>>(
                "actions",
                |m: &SCConditionActor| { &m.actions },
                |m: &mut SCConditionActor| { &mut m.actions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SCConditionActor>(
                "SCConditionActor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SCConditionActor {
        static instance: ::protobuf::rt::LazyV2<SCConditionActor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SCConditionActor::new)
    }
}

impl ::protobuf::Clear for SCConditionActor {
    fn clear(&mut self) {
        self.actor_id.clear();
        self.observer_id.clear();
        self.actions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SCConditionActor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SCConditionActor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SCObserverAction {
    // message fields
    pub config: ::protobuf::SingularPtrField<super::module::RelayOutletConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SCObserverAction {
    fn default() -> &'a SCObserverAction {
        <SCObserverAction as ::protobuf::Message>::default_instance()
    }
}

impl SCObserverAction {
    pub fn new() -> SCObserverAction {
        ::std::default::Default::default()
    }

    // .RelayOutletConfig config = 1;


    pub fn get_config(&self) -> &super::module::RelayOutletConfig {
        self.config.as_ref().unwrap_or_else(|| <super::module::RelayOutletConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: super::module::RelayOutletConfig) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut super::module::RelayOutletConfig {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> super::module::RelayOutletConfig {
        self.config.take().unwrap_or_else(|| super::module::RelayOutletConfig::new())
    }
}

impl ::protobuf::Message for SCObserverAction {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SCObserverAction {
        SCObserverAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::module::RelayOutletConfig>>(
                "config",
                |m: &SCObserverAction| { &m.config },
                |m: &mut SCObserverAction| { &mut m.config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SCObserverAction>(
                "SCObserverAction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SCObserverAction {
        static instance: ::protobuf::rt::LazyV2<SCObserverAction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SCObserverAction::new)
    }
}

impl ::protobuf::Clear for SCObserverAction {
    fn clear(&mut self) {
        self.config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SCObserverAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SCObserverAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StaticControllerImplementation {
    // message fields
    pub conditions: ::protobuf::RepeatedField<SCConditionActor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StaticControllerImplementation {
    fn default() -> &'a StaticControllerImplementation {
        <StaticControllerImplementation as ::protobuf::Message>::default_instance()
    }
}

impl StaticControllerImplementation {
    pub fn new() -> StaticControllerImplementation {
        ::std::default::Default::default()
    }

    // repeated .SCConditionActor conditions = 1;


    pub fn get_conditions(&self) -> &[SCConditionActor] {
        &self.conditions
    }
    pub fn clear_conditions(&mut self) {
        self.conditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_conditions(&mut self, v: ::protobuf::RepeatedField<SCConditionActor>) {
        self.conditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_conditions(&mut self) -> &mut ::protobuf::RepeatedField<SCConditionActor> {
        &mut self.conditions
    }

    // Take field
    pub fn take_conditions(&mut self) -> ::protobuf::RepeatedField<SCConditionActor> {
        ::std::mem::replace(&mut self.conditions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StaticControllerImplementation {
    fn is_initialized(&self) -> bool {
        for v in &self.conditions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.conditions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.conditions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StaticControllerImplementation {
        StaticControllerImplementation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SCConditionActor>>(
                "conditions",
                |m: &StaticControllerImplementation| { &m.conditions },
                |m: &mut StaticControllerImplementation| { &mut m.conditions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StaticControllerImplementation>(
                "StaticControllerImplementation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StaticControllerImplementation {
        static instance: ::protobuf::rt::LazyV2<StaticControllerImplementation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StaticControllerImplementation::new)
    }
}

impl ::protobuf::Clear for StaticControllerImplementation {
    fn clear(&mut self) {
        self.conditions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StaticControllerImplementation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StaticControllerImplementation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProgressiveControlerImplementation {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProgressiveControlerImplementation {
    fn default() -> &'a ProgressiveControlerImplementation {
        <ProgressiveControlerImplementation as ::protobuf::Message>::default_instance()
    }
}

impl ProgressiveControlerImplementation {
    pub fn new() -> ProgressiveControlerImplementation {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ProgressiveControlerImplementation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProgressiveControlerImplementation {
        ProgressiveControlerImplementation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProgressiveControlerImplementation>(
                "ProgressiveControlerImplementation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProgressiveControlerImplementation {
        static instance: ::protobuf::rt::LazyV2<ProgressiveControlerImplementation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProgressiveControlerImplementation::new)
    }
}

impl ::protobuf::Clear for ProgressiveControlerImplementation {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProgressiveControlerImplementation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgressiveControlerImplementation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnvironmentControllerConfiguration {
    // message fields
    pub id: ::std::string::String,
    pub observers: ::protobuf::RepeatedField<MObserver>,
    pub actors: ::protobuf::RepeatedField<MActor>,
    // message oneof groups
    pub implementation: ::std::option::Option<EnvironmentControllerConfiguration_oneof_implementation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnvironmentControllerConfiguration {
    fn default() -> &'a EnvironmentControllerConfiguration {
        <EnvironmentControllerConfiguration as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum EnvironmentControllerConfiguration_oneof_implementation {
    field_static(StaticControllerImplementation),
    progressive(ProgressiveControlerImplementation),
}

impl EnvironmentControllerConfiguration {
    pub fn new() -> EnvironmentControllerConfiguration {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // repeated .MObserver observers = 2;


    pub fn get_observers(&self) -> &[MObserver] {
        &self.observers
    }
    pub fn clear_observers(&mut self) {
        self.observers.clear();
    }

    // Param is passed by value, moved
    pub fn set_observers(&mut self, v: ::protobuf::RepeatedField<MObserver>) {
        self.observers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_observers(&mut self) -> &mut ::protobuf::RepeatedField<MObserver> {
        &mut self.observers
    }

    // Take field
    pub fn take_observers(&mut self) -> ::protobuf::RepeatedField<MObserver> {
        ::std::mem::replace(&mut self.observers, ::protobuf::RepeatedField::new())
    }

    // repeated .MActor actors = 3;


    pub fn get_actors(&self) -> &[MActor] {
        &self.actors
    }
    pub fn clear_actors(&mut self) {
        self.actors.clear();
    }

    // Param is passed by value, moved
    pub fn set_actors(&mut self, v: ::protobuf::RepeatedField<MActor>) {
        self.actors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_actors(&mut self) -> &mut ::protobuf::RepeatedField<MActor> {
        &mut self.actors
    }

    // Take field
    pub fn take_actors(&mut self) -> ::protobuf::RepeatedField<MActor> {
        ::std::mem::replace(&mut self.actors, ::protobuf::RepeatedField::new())
    }

    // .StaticControllerImplementation static = 10;


    pub fn get_field_static(&self) -> &StaticControllerImplementation {
        match self.implementation {
            ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::field_static(ref v)) => v,
            _ => <StaticControllerImplementation as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_field_static(&mut self) {
        self.implementation = ::std::option::Option::None;
    }

    pub fn has_field_static(&self) -> bool {
        match self.implementation {
            ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::field_static(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_static(&mut self, v: StaticControllerImplementation) {
        self.implementation = ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::field_static(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_static(&mut self) -> &mut StaticControllerImplementation {
        if let ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::field_static(_)) = self.implementation {
        } else {
            self.implementation = ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::field_static(StaticControllerImplementation::new()));
        }
        match self.implementation {
            ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::field_static(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_static(&mut self) -> StaticControllerImplementation {
        if self.has_field_static() {
            match self.implementation.take() {
                ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::field_static(v)) => v,
                _ => panic!(),
            }
        } else {
            StaticControllerImplementation::new()
        }
    }

    // .ProgressiveControlerImplementation progressive = 15;


    pub fn get_progressive(&self) -> &ProgressiveControlerImplementation {
        match self.implementation {
            ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::progressive(ref v)) => v,
            _ => <ProgressiveControlerImplementation as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_progressive(&mut self) {
        self.implementation = ::std::option::Option::None;
    }

    pub fn has_progressive(&self) -> bool {
        match self.implementation {
            ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::progressive(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_progressive(&mut self, v: ProgressiveControlerImplementation) {
        self.implementation = ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::progressive(v))
    }

    // Mutable pointer to the field.
    pub fn mut_progressive(&mut self) -> &mut ProgressiveControlerImplementation {
        if let ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::progressive(_)) = self.implementation {
        } else {
            self.implementation = ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::progressive(ProgressiveControlerImplementation::new()));
        }
        match self.implementation {
            ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::progressive(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_progressive(&mut self) -> ProgressiveControlerImplementation {
        if self.has_progressive() {
            match self.implementation.take() {
                ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::progressive(v)) => v,
                _ => panic!(),
            }
        } else {
            ProgressiveControlerImplementation::new()
        }
    }
}

impl ::protobuf::Message for EnvironmentControllerConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.observers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.actors {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(EnvironmentControllerConfiguration_oneof_implementation::field_static(ref v)) = self.implementation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EnvironmentControllerConfiguration_oneof_implementation::progressive(ref v)) = self.implementation {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.observers)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.actors)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.implementation = ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::field_static(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.implementation = ::std::option::Option::Some(EnvironmentControllerConfiguration_oneof_implementation::progressive(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for value in &self.observers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.actors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.implementation {
            match v {
                &EnvironmentControllerConfiguration_oneof_implementation::field_static(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EnvironmentControllerConfiguration_oneof_implementation::progressive(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for v in &self.observers {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.actors {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.implementation {
            match v {
                &EnvironmentControllerConfiguration_oneof_implementation::field_static(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EnvironmentControllerConfiguration_oneof_implementation::progressive(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnvironmentControllerConfiguration {
        EnvironmentControllerConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &EnvironmentControllerConfiguration| { &m.id },
                |m: &mut EnvironmentControllerConfiguration| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MObserver>>(
                "observers",
                |m: &EnvironmentControllerConfiguration| { &m.observers },
                |m: &mut EnvironmentControllerConfiguration| { &mut m.observers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MActor>>(
                "actors",
                |m: &EnvironmentControllerConfiguration| { &m.actors },
                |m: &mut EnvironmentControllerConfiguration| { &mut m.actors },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StaticControllerImplementation>(
                "static",
                EnvironmentControllerConfiguration::has_field_static,
                EnvironmentControllerConfiguration::get_field_static,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ProgressiveControlerImplementation>(
                "progressive",
                EnvironmentControllerConfiguration::has_progressive,
                EnvironmentControllerConfiguration::get_progressive,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EnvironmentControllerConfiguration>(
                "EnvironmentControllerConfiguration",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EnvironmentControllerConfiguration {
        static instance: ::protobuf::rt::LazyV2<EnvironmentControllerConfiguration> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EnvironmentControllerConfiguration::new)
    }
}

impl ::protobuf::Clear for EnvironmentControllerConfiguration {
    fn clear(&mut self) {
        self.id.clear();
        self.observers.clear();
        self.actors.clear();
        self.implementation = ::std::option::Option::None;
        self.implementation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnvironmentControllerConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnvironmentControllerConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RessourceType {
    ACTOR_MODULE = 0,
    ACTOR_VIRTUAL = 1,
}

impl ::protobuf::ProtobufEnum for RessourceType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RessourceType> {
        match value {
            0 => ::std::option::Option::Some(RessourceType::ACTOR_MODULE),
            1 => ::std::option::Option::Some(RessourceType::ACTOR_VIRTUAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RessourceType] = &[
            RessourceType::ACTOR_MODULE,
            RessourceType::ACTOR_VIRTUAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RessourceType>("RessourceType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RessourceType {
}

impl ::std::default::Default for RessourceType {
    fn default() -> Self {
        RessourceType::ACTOR_MODULE
    }
}

impl ::protobuf::reflect::ProtobufValue for RessourceType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14env_controller.proto\x1a\x0cmodule.proto\"l\n\x06MActor\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12\x0e\n\x02id\x18\x02\x20\x01(\tR\
    \x02id\x12\x1a\n\x08property\x18\x03\x20\x01(\tR\x08property\x12\"\n\x04\
    type\x18\x05\x20\x01(\x0e2\x0e.RessourceTypeR\x04type\"o\n\tMObserver\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x0e\n\x02id\x18\x02\
    \x20\x01(\tR\x02id\x12\x1a\n\x08property\x18\x03\x20\x01(\tR\x08property\
    \x12\"\n\x04type\x18\x04\x20\x01(\x0e2\x0e.RessourceTypeR\x04type\"\xd7\
    \x01\n\x10SCConditionActor\x12\x19\n\x08actor_id\x18\x01\x20\x01(\tR\x07\
    actorId\x12\x1f\n\x0bobserver_id\x18\x02\x20\x01(\tR\nobserverId\x128\n\
    \x07actions\x18\x03\x20\x03(\x0b2\x1e.SCConditionActor.ActionsEntryR\x07\
    actions\x1aM\n\x0cActionsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\x05R\
    \x03key\x12'\n\x05value\x18\x02\x20\x01(\x0b2\x11.SCObserverActionR\x05v\
    alue:\x028\x01\">\n\x10SCObserverAction\x12*\n\x06config\x18\x01\x20\x01\
    (\x0b2\x12.RelayOutletConfigR\x06config\"S\n\x1eStaticControllerImplemen\
    tation\x121\n\nconditions\x18\x01\x20\x03(\x0b2\x11.SCConditionActorR\nc\
    onditions\"$\n\"ProgressiveControlerImplementation\"\x95\x02\n\"Environm\
    entControllerConfiguration\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\
    (\n\tobservers\x18\x02\x20\x03(\x0b2\n.MObserverR\tobservers\x12\x1f\n\
    \x06actors\x18\x03\x20\x03(\x0b2\x07.MActorR\x06actors\x129\n\x06static\
    \x18\n\x20\x01(\x0b2\x1f.StaticControllerImplementationH\0R\x06static\
    \x12G\n\x0bprogressive\x18\x0f\x20\x01(\x0b2#.ProgressiveControlerImplem\
    entationH\0R\x0bprogressiveB\x10\n\x0eimplementation*4\n\rRessourceType\
    \x12\x10\n\x0cACTOR_MODULE\x10\0\x12\x11\n\rACTOR_VIRTUAL\x10\x01b\x06pr\
    oto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
