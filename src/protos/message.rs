// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct GrowbeMessage {
    // message fields
    pub topic: ::std::string::String,
    pub messageType: i32,
    pub body: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrowbeMessage {
    fn default() -> &'a GrowbeMessage {
        <GrowbeMessage as ::protobuf::Message>::default_instance()
    }
}

impl GrowbeMessage {
    pub fn new() -> GrowbeMessage {
        ::std::default::Default::default()
    }

    // string topic = 1;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // int32 messageType = 2;


    pub fn get_messageType(&self) -> i32 {
        self.messageType
    }
    pub fn clear_messageType(&mut self) {
        self.messageType = 0;
    }

    // Param is passed by value, moved
    pub fn set_messageType(&mut self, v: i32) {
        self.messageType = v;
    }

    // bytes body = 3;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GrowbeMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.messageType = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if self.messageType != 0 {
            my_size += ::protobuf::rt::value_size(2, self.messageType, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if self.messageType != 0 {
            os.write_int32(2, self.messageType)?;
        }
        if !self.body.is_empty() {
            os.write_bytes(3, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrowbeMessage {
        GrowbeMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &GrowbeMessage| { &m.topic },
                |m: &mut GrowbeMessage| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "messageType",
                |m: &GrowbeMessage| { &m.messageType },
                |m: &mut GrowbeMessage| { &mut m.messageType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body",
                |m: &GrowbeMessage| { &m.body },
                |m: &mut GrowbeMessage| { &mut m.body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrowbeMessage>(
                "GrowbeMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrowbeMessage {
        static instance: ::protobuf::rt::LazyV2<GrowbeMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrowbeMessage::new)
    }
}

impl ::protobuf::Clear for GrowbeMessage {
    fn clear(&mut self) {
        self.topic.clear();
        self.messageType = 0;
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrowbeMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrowbeMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HearthBeath {
    // message fields
    pub rtc: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HearthBeath {
    fn default() -> &'a HearthBeath {
        <HearthBeath as ::protobuf::Message>::default_instance()
    }
}

impl HearthBeath {
    pub fn new() -> HearthBeath {
        ::std::default::Default::default()
    }

    // string rtc = 2;


    pub fn get_rtc(&self) -> &str {
        &self.rtc
    }
    pub fn clear_rtc(&mut self) {
        self.rtc.clear();
    }

    // Param is passed by value, moved
    pub fn set_rtc(&mut self, v: ::std::string::String) {
        self.rtc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rtc(&mut self) -> &mut ::std::string::String {
        &mut self.rtc
    }

    // Take field
    pub fn take_rtc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rtc, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HearthBeath {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rtc)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rtc.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rtc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.rtc.is_empty() {
            os.write_string(2, &self.rtc)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HearthBeath {
        HearthBeath::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rtc",
                |m: &HearthBeath| { &m.rtc },
                |m: &mut HearthBeath| { &mut m.rtc },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HearthBeath>(
                "HearthBeath",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HearthBeath {
        static instance: ::protobuf::rt::LazyV2<HearthBeath> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HearthBeath::new)
    }
}

impl ::protobuf::Clear for HearthBeath {
    fn clear(&mut self) {
        self.rtc.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HearthBeath {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HearthBeath {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Log {
    // message fields
    pub timestamp: i32,
    pub log: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Log {
    fn default() -> &'a Log {
        <Log as ::protobuf::Message>::default_instance()
    }
}

impl Log {
    pub fn new() -> Log {
        ::std::default::Default::default()
    }

    // int32 timestamp = 1;


    pub fn get_timestamp(&self) -> i32 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i32) {
        self.timestamp = v;
    }

    // string log = 2;


    pub fn get_log(&self) -> &str {
        &self.log
    }
    pub fn clear_log(&mut self) {
        self.log.clear();
    }

    // Param is passed by value, moved
    pub fn set_log(&mut self, v: ::std::string::String) {
        self.log = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log(&mut self) -> &mut ::std::string::String {
        &mut self.log
    }

    // Take field
    pub fn take_log(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.log, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Log {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timestamp = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.log)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.log.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.log);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_int32(1, self.timestamp)?;
        }
        if !self.log.is_empty() {
            os.write_string(2, &self.log)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Log {
        Log::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "timestamp",
                |m: &Log| { &m.timestamp },
                |m: &mut Log| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log",
                |m: &Log| { &m.log },
                |m: &mut Log| { &mut m.log },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Log>(
                "Log",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Log {
        static instance: ::protobuf::rt::LazyV2<Log> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Log::new)
    }
}

impl ::protobuf::Clear for Log {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.log.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Log {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Log {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActionResponse {
    // message fields
    pub action: ActionCode,
    pub status: u32,
    pub msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ActionResponse {
    fn default() -> &'a ActionResponse {
        <ActionResponse as ::protobuf::Message>::default_instance()
    }
}

impl ActionResponse {
    pub fn new() -> ActionResponse {
        ::std::default::Default::default()
    }

    // .ActionCode action = 1;


    pub fn get_action(&self) -> ActionCode {
        self.action
    }
    pub fn clear_action(&mut self) {
        self.action = ActionCode::PARSING;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ActionCode) {
        self.action = v;
    }

    // uint32 status = 2;


    pub fn get_status(&self) -> u32 {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = 0;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = v;
    }

    // string msg = 3;


    pub fn get_msg(&self) -> &str {
        &self.msg
    }
    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ActionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.status = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.action != ActionCode::PARSING {
            my_size += ::protobuf::rt::enum_size(1, self.action);
        }
        if self.status != 0 {
            my_size += ::protobuf::rt::value_size(2, self.status, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.action != ActionCode::PARSING {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.action))?;
        }
        if self.status != 0 {
            os.write_uint32(2, self.status)?;
        }
        if !self.msg.is_empty() {
            os.write_string(3, &self.msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActionResponse {
        ActionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ActionCode>>(
                "action",
                |m: &ActionResponse| { &m.action },
                |m: &mut ActionResponse| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "status",
                |m: &ActionResponse| { &m.status },
                |m: &mut ActionResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg",
                |m: &ActionResponse| { &m.msg },
                |m: &mut ActionResponse| { &mut m.msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ActionResponse>(
                "ActionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ActionResponse {
        static instance: ::protobuf::rt::LazyV2<ActionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ActionResponse::new)
    }
}

impl ::protobuf::Clear for ActionResponse {
    fn clear(&mut self) {
        self.action = ActionCode::PARSING;
        self.status = 0;
        self.msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RTCTime {
    // message fields
    pub second: u32,
    pub minute: u32,
    pub hour: u32,
    pub day: u32,
    pub month: u32,
    pub year: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RTCTime {
    fn default() -> &'a RTCTime {
        <RTCTime as ::protobuf::Message>::default_instance()
    }
}

impl RTCTime {
    pub fn new() -> RTCTime {
        ::std::default::Default::default()
    }

    // uint32 second = 1;


    pub fn get_second(&self) -> u32 {
        self.second
    }
    pub fn clear_second(&mut self) {
        self.second = 0;
    }

    // Param is passed by value, moved
    pub fn set_second(&mut self, v: u32) {
        self.second = v;
    }

    // uint32 minute = 2;


    pub fn get_minute(&self) -> u32 {
        self.minute
    }
    pub fn clear_minute(&mut self) {
        self.minute = 0;
    }

    // Param is passed by value, moved
    pub fn set_minute(&mut self, v: u32) {
        self.minute = v;
    }

    // uint32 hour = 3;


    pub fn get_hour(&self) -> u32 {
        self.hour
    }
    pub fn clear_hour(&mut self) {
        self.hour = 0;
    }

    // Param is passed by value, moved
    pub fn set_hour(&mut self, v: u32) {
        self.hour = v;
    }

    // uint32 day = 4;


    pub fn get_day(&self) -> u32 {
        self.day
    }
    pub fn clear_day(&mut self) {
        self.day = 0;
    }

    // Param is passed by value, moved
    pub fn set_day(&mut self, v: u32) {
        self.day = v;
    }

    // uint32 month = 5;


    pub fn get_month(&self) -> u32 {
        self.month
    }
    pub fn clear_month(&mut self) {
        self.month = 0;
    }

    // Param is passed by value, moved
    pub fn set_month(&mut self, v: u32) {
        self.month = v;
    }

    // uint32 year = 6;


    pub fn get_year(&self) -> u32 {
        self.year
    }
    pub fn clear_year(&mut self) {
        self.year = 0;
    }

    // Param is passed by value, moved
    pub fn set_year(&mut self, v: u32) {
        self.year = v;
    }
}

impl ::protobuf::Message for RTCTime {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.second = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minute = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hour = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.day = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.month = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.year = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.second != 0 {
            my_size += ::protobuf::rt::value_size(1, self.second, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minute != 0 {
            my_size += ::protobuf::rt::value_size(2, self.minute, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hour != 0 {
            my_size += ::protobuf::rt::value_size(3, self.hour, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.day != 0 {
            my_size += ::protobuf::rt::value_size(4, self.day, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.month != 0 {
            my_size += ::protobuf::rt::value_size(5, self.month, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.year != 0 {
            my_size += ::protobuf::rt::value_size(6, self.year, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.second != 0 {
            os.write_uint32(1, self.second)?;
        }
        if self.minute != 0 {
            os.write_uint32(2, self.minute)?;
        }
        if self.hour != 0 {
            os.write_uint32(3, self.hour)?;
        }
        if self.day != 0 {
            os.write_uint32(4, self.day)?;
        }
        if self.month != 0 {
            os.write_uint32(5, self.month)?;
        }
        if self.year != 0 {
            os.write_uint32(6, self.year)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RTCTime {
        RTCTime::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "second",
                |m: &RTCTime| { &m.second },
                |m: &mut RTCTime| { &mut m.second },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "minute",
                |m: &RTCTime| { &m.minute },
                |m: &mut RTCTime| { &mut m.minute },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hour",
                |m: &RTCTime| { &m.hour },
                |m: &mut RTCTime| { &mut m.hour },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "day",
                |m: &RTCTime| { &m.day },
                |m: &mut RTCTime| { &mut m.day },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "month",
                |m: &RTCTime| { &m.month },
                |m: &mut RTCTime| { &mut m.month },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "year",
                |m: &RTCTime| { &m.year },
                |m: &mut RTCTime| { &mut m.year },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RTCTime>(
                "RTCTime",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RTCTime {
        static instance: ::protobuf::rt::LazyV2<RTCTime> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RTCTime::new)
    }
}

impl ::protobuf::Clear for RTCTime {
    fn clear(&mut self) {
        self.second = 0;
        self.minute = 0;
        self.hour = 0;
        self.day = 0;
        self.month = 0;
        self.year = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RTCTime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RTCTime {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ActionCode {
    PARSING = 0,
    MODULE_CONFIG = 1,
    MAINBOARD_CONFIG = 2,
    RTC_SET = 3,
    SYNC_REQUEST = 4,
}

impl ::protobuf::ProtobufEnum for ActionCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ActionCode> {
        match value {
            0 => ::std::option::Option::Some(ActionCode::PARSING),
            1 => ::std::option::Option::Some(ActionCode::MODULE_CONFIG),
            2 => ::std::option::Option::Some(ActionCode::MAINBOARD_CONFIG),
            3 => ::std::option::Option::Some(ActionCode::RTC_SET),
            4 => ::std::option::Option::Some(ActionCode::SYNC_REQUEST),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ActionCode] = &[
            ActionCode::PARSING,
            ActionCode::MODULE_CONFIG,
            ActionCode::MAINBOARD_CONFIG,
            ActionCode::RTC_SET,
            ActionCode::SYNC_REQUEST,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ActionCode>("ActionCode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ActionCode {
}

impl ::std::default::Default for ActionCode {
    fn default() -> Self {
        ActionCode::PARSING
    }
}

impl ::protobuf::reflect::ProtobufValue for ActionCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"[\n\rGrowbeMessage\x12\x14\n\x05topic\x18\x01\x20\x01\
    (\tR\x05topic\x12\x20\n\x0bmessageType\x18\x02\x20\x01(\x05R\x0bmessageT\
    ype\x12\x12\n\x04body\x18\x03\x20\x01(\x0cR\x04body\"\x1f\n\x0bHearthBea\
    th\x12\x10\n\x03rtc\x18\x02\x20\x01(\tR\x03rtc\"5\n\x03Log\x12\x1c\n\tti\
    mestamp\x18\x01\x20\x01(\x05R\ttimestamp\x12\x10\n\x03log\x18\x02\x20\
    \x01(\tR\x03log\"_\n\x0eActionResponse\x12#\n\x06action\x18\x01\x20\x01(\
    \x0e2\x0b.ActionCodeR\x06action\x12\x16\n\x06status\x18\x02\x20\x01(\rR\
    \x06status\x12\x10\n\x03msg\x18\x03\x20\x01(\tR\x03msg\"\x89\x01\n\x07RT\
    CTime\x12\x16\n\x06second\x18\x01\x20\x01(\rR\x06second\x12\x16\n\x06min\
    ute\x18\x02\x20\x01(\rR\x06minute\x12\x12\n\x04hour\x18\x03\x20\x01(\rR\
    \x04hour\x12\x10\n\x03day\x18\x04\x20\x01(\rR\x03day\x12\x14\n\x05month\
    \x18\x05\x20\x01(\rR\x05month\x12\x12\n\x04year\x18\x06\x20\x01(\rR\x04y\
    ear*a\n\nActionCode\x12\x0b\n\x07PARSING\x10\0\x12\x11\n\rMODULE_CONFIG\
    \x10\x01\x12\x14\n\x10MAINBOARD_CONFIG\x10\x02\x12\x0b\n\x07RTC_SET\x10\
    \x03\x12\x10\n\x0cSYNC_REQUEST\x10\x04b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
